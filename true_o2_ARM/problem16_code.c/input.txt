# problem16/code.c
	.section	__TEXT,__text,regular,pure_instructions
	.build_version macos, 13, 0	sdk_version 13, 3
	.globl	_func0                          ## -- Begin function func0
	.p2align	4, 0x90
_func0:                                 ## @func0
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edi, %r15d
	testl	%edi, %edi
	jle	LBB0_1
## %bb.8:
	movl	%r15d, %r12d
	negl	%r12d
	movl	$2, %r13d
	movl	$1, %ebx
	leaq	L_.str(%rip), %r14
	.p2align	4, 0x90
LBB0_9:                                 ## =>This Inner Loop Header: Depth=1
	xorl	%edi, %edi
	xorl	%esi, %esi
	movq	%r14, %rdx
	movl	%ebx, %ecx
	xorl	%eax, %eax
	callq	_snprintf
	addl	%eax, %r13d
	leal	(%r12,%rbx), %eax
	incl	%eax
	movl	%ebx, %ecx
	incl	%ecx
	movl	%ecx, %ebx
	cmpl	$1, %eax
	jne	LBB0_9
## %bb.2:
	movslq	%r13d, %rdi
	jmp	LBB0_3
LBB0_1:
	movl	$2, %edi
LBB0_3:
	callq	_malloc
	movq	%rax, %r14
	testq	%rax, %rax
	je	LBB0_7
## %bb.4:
	movw	$48, (%r14)
	testl	%r15d, %r15d
	jle	LBB0_7
## %bb.5:
	movq	%r14, %rbx
	incq	%rbx
	negl	%r15d
	movl	$1, %r13d
	leaq	L_.str(%rip), %r12
	.p2align	4, 0x90
LBB0_6:                                 ## =>This Inner Loop Header: Depth=1
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movl	%r13d, %edx
	xorl	%eax, %eax
	callq	_sprintf
	cltq
	addq	%rax, %rbx
	leal	(%r15,%r13), %eax
	incl	%eax
	movl	%r13d, %ecx
	incl	%ecx
	movl	%ecx, %r13d
	cmpl	$1, %eax
	jne	LBB0_6
LBB0_7:
	movq	%r14, %rax
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.section	__TEXT,__cstring,cstring_literals
L_.str:                                 ## @.str
	.asciz	" %d"

.subsections_via_symbols
