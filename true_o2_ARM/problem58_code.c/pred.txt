# problem58/code.c
	.section	__TEXT,__text,regular,pure_instructions
	.build_version macos, 13, 0	sdk_version 13, 3
	.globl	_func0                          ; -- Begin function func0
	.p2align	2
_func0:                                 ; @func0
	.cfi_startproc
; %bb.0:
	cmp	w1, #2
	b.ge	LBB0_2
; %bb.1:
	mov	w0, #1
	ret
LBB0_2:
	ldr	s0, [x0]
	sub	x11, x1, #1
	cmp	x11, #16
	b.hs	LBB0_4
; %bb.3:
	mov	w10, #0
	mov	w8, #0
	mov	w9, #1
	b	LBB0_8
LBB0_4:
	and	x12, x11, #0xfffffffffffffff0
	orr	x9, x12, #0x1
	dup.4s	v1, v0[0]
	add	x8, x0, #36
	movi.2d	v2, #0000000000000000
	movi.4s	v3, #1
	mov	x10, x12
	movi.2d	v4, #0000000000000000
	movi.2d	v5, #0000000000000000
	movi.2d	v6, #0000000000000000
	movi.2d	v7, #0000000000000000
	movi.2d	v16, #0000000000000000
	movi.2d	v17, #0000000000000000
LBB0_5:                                 ; =>This Inner Loop Header: Depth=1
	ldp	q18, q19, [x8, #-32]
	ext.16b	v20, v1, v18, #12
	ldp	q21, q1, [x8], #64
	ext.16b	v22, v18, v19, #12
	ext.16b	v23, v19, v21, #12
	ext.16b	v24, v21, v2, #12
	fcmgt.4s	v25, v18, v20
	fcmgt.4s	v26, v19, v22
	fcmgt.4s	v27, v21, v23
	fcmgt.4s	v28, v2, v24
	bit.16b	v6, v3, v25
	bit.16b	v7, v3, v26
	bit.16b	v16, v3, v27
	bit.16b	v17, v3, v28
	fcmgt.4s	v25, v20, v18
	fcmgt.4s	v26, v22, v19
	fcmgt.4s	v27, v23, v21
	fcmgt.4s	v28, v24, v2
	bit.16b	v2, v3, v25
	bit.16b	v4, v3, v26
	bit.16b	v5, v3, v27
	bit.16b	v1, v3, v28
	subs	x10, x10, #16
	b.ne	LBB0_5
; %bb.6:
	cmeq.4s	v1, v6, #0
	bit.16b	v6, v7, v1
	cmeq.4s	v1, v6, #0
	bit.16b	v6, v16, v1
	cmeq.4s	v1, v6, #0
	bit.16b	v6, v17, v1
	cmtst.4s	v1, v6, v6
	xtn.4h	v1, v1
	umov.h	w8, v1[0]
	umov.h	w10, v1[1]
	and	w10, w10, #0x1
	bfi	w8, w10, #1, #1
	umov.h	w10, v1[2]
	and	w10, w10, #0x1
	bfi	w8, w10, #2, #1
	umov.h	w10, v1[3]
	bfi	w8, w10, #3, #29
	tst	w8, #0xf
	cset	w8, ne
	cmeq.4s	v1, v2, #0
	bit.16b	v2, v4, v1
	cmeq.4s	v1, v2, #0
	bit.16b	v2, v5, v1
	cmeq.4s	v1, v2, #0
	bit.16b	v2, v17, v1
	cmtst.4s	v1, v2, v2
	xtn.4h	v1, v1
	umov.h	w10, v1[0]
	umov.h	w11, v1[1]
	bfi	w10, w11, #1, #1
	umov.h	w11, v1[2]
	bfi	w10, w11, #2, #1
	umov.h	w11, v1[3]
	bfi	w10, w11, #3, #29
	tst	w10, #0xf
	cset	w10, ne
	cmp	x11, x12
	b.eq	LBB0_10
; %bb.7:
	dup.4s	v0, v0[0]
LBB0_8:
	add	x11, x0, x9, lsl #2
	sub	x12, x1, x9
LBB0_9:                                 ; =>This Inner Loop Header: Depth=1
	ldr	s1, [x11], #4
	fcmp	s1, s0
	csinc	w8, w8, wzr, le
	csinc	w10, w10, wzr, pl
	fmov	s0, s1
	subs	x12, x12, #1
	b.ne	LBB0_9
LBB0_10:
	add	w8, w10, w8
	cmp	w8, #2
	cset	w0, ne
	ret
	.cfi_endproc
                                        ; -- End function
.subsections_via_symbols

