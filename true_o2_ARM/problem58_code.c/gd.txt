# problem58/code.c
	.section	__TEXT,__text,regular,pure_instructions
	.build_version macos, 13, 0	sdk_version 13, 3
	.globl	_func0                          ; -- Begin function func0
	.p2align	2
_func0:                                 ; @func0
	.cfi_startproc
; %bb.0:
	cmp	w1, #2
	b.lt	LBB0_3
; %bb.1:
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	.cfi_remember_state
	mov	w8, w1
	ldr	s0, [x0]
	sub	x10, x8, #1
	cmp	x10, #16
	b.hs	LBB0_4
; %bb.2:
	mov	w13, #0
	mov	w12, #0
	mov	w9, #1
	b	LBB0_8
LBB0_3:
	.cfi_def_cfa wsp, 0
	mov	w0, #1
	ret
LBB0_4:
	.cfi_restore_state
	dup.4s	v0, v0[0]
	movi.2d	v1, #0000000000000000
	and	x11, x10, #0xfffffffffffffff0
	movi.4s	v5, #1
	orr	x9, x11, #0x1
	movi.2d	v4, #0000000000000000
	add	x12, x0, #36
	mov	x13, x11
	movi.2d	v3, #0000000000000000
	movi.2d	v2, #0000000000000000
	movi.2d	v7, #0000000000000000
	movi.2d	v17, #0000000000000000
	movi.2d	v16, #0000000000000000
	movi.2d	v6, #0000000000000000
LBB0_5:                                 ; =>This Inner Loop Header: Depth=1
	ldp	q18, q19, [x12, #-32]
	ext.16b	v20, v0, v18, #12
	ldp	q21, q0, [x12], #64
	ext.16b	v22, v18, v19, #12
	ext.16b	v23, v19, v21, #12
	ext.16b	v24, v21, v0, #12
	fcmgt.4s	v25, v18, v20
	fcmgt.4s	v26, v19, v22
	fcmgt.4s	v27, v21, v23
	fcmgt.4s	v28, v0, v24
	bit.16b	v7, v5, v25
	bit.16b	v17, v5, v26
	bit.16b	v16, v5, v27
	bit.16b	v6, v5, v28
	fcmgt.4s	v18, v20, v18
	fcmgt.4s	v19, v22, v19
	fcmgt.4s	v20, v23, v21
	fcmgt.4s	v21, v24, v0
	bit.16b	v1, v5, v18
	bit.16b	v4, v5, v19
	bit.16b	v3, v5, v20
	bit.16b	v2, v5, v21
	subs	x13, x13, #16
	b.ne	LBB0_5
; %bb.6:
	cmeq.4s	v5, v7, #0
	bsl.16b	v5, v17, v7
	cmeq.4s	v7, v5, #0
	bit.16b	v5, v16, v7
	cmeq.4s	v7, v5, #0
	bit.16b	v5, v6, v7
	cmtst.4s	v5, v5, v5
	xtn.4h	v5, v5
	umov.h	w12, v5[0]
	umov.h	w13, v5[1]
	and	w13, w13, #0x1
	bfi	w12, w13, #1, #1
	umov.h	w13, v5[2]
	and	w13, w13, #0x1
	bfi	w12, w13, #2, #1
	umov.h	w13, v5[3]
	bfi	w12, w13, #3, #29
	tst	w12, #0xf
	cset	w12, ne
	cmeq.4s	v5, v1, #0
	bit.16b	v1, v4, v5
	cmeq.4s	v4, v1, #0
	bit.16b	v1, v3, v4
	cmeq.4s	v3, v1, #0
	bit.16b	v1, v2, v3
	cmtst.4s	v1, v1, v1
	xtn.4h	v1, v1
	umov.h	w13, v1[0]
	umov.h	w14, v1[1]
	and	w14, w14, #0x1
	bfi	w13, w14, #1, #1
	umov.h	w14, v1[2]
	and	w14, w14, #0x1
	bfi	w13, w14, #2, #1
	umov.h	w14, v1[3]
	bfi	w13, w14, #3, #29
	tst	w13, #0xf
	cset	w13, ne
	cmp	x10, x11
	b.eq	LBB0_10
; %bb.7:
	mov	s0, v0[3]
LBB0_8:
	add	x10, x0, x9, lsl #2
	sub	x8, x8, x9
LBB0_9:                                 ; =>This Inner Loop Header: Depth=1
	ldr	s1, [x10], #4
	fcmp	s1, s0
	csinc	w12, w12, wzr, le
	csinc	w13, w13, wzr, pl
	fmov	s0, s1
	subs	x8, x8, #1
	b.ne	LBB0_9
LBB0_10:
	add	w8, w13, w12
	cmp	w8, #2
	cset	w0, ne
	add	sp, sp, #16
	ret
	.cfi_endproc
                                        ; -- End function
.subsections_via_symbols
