# problem31/code.c
	.section	__TEXT,__text,regular,pure_instructions
	.build_version macos, 13, 0	sdk_version 13, 3
	.globl	_func0                          ## -- Begin function func0
	.p2align	4, 0x90
_func0:                                 ## @func0
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rdx, %r14
	movl	%esi, %r15d
	movq	%rdi, %rbx
	movslq	%esi, %r12
	leaq	(,%r12,4), %rdi
	callq	_malloc
	movl	$0, (%r14)
	testl	%r12d, %r12d
	jle	LBB0_6
## %bb.1:
	movl	%r15d, %r8d
	cmpl	$1, %r15d
	jne	LBB0_7
## %bb.2:
	xorl	%edx, %edx
	xorl	%esi, %esi
LBB0_3:
	testb	$1, %r8b
	je	LBB0_6
## %bb.4:
	movss	(%rbx,%rsi,4), %xmm0            ## xmm0 = mem[0],zero,zero,zero
	xorps	%xmm1, %xmm1
	ucomiss	%xmm1, %xmm0
	jbe	LBB0_6
## %bb.5:
	leal	1(%rdx), %ecx
	movl	%ecx, (%r14)
	movslq	%edx, %rcx
	movss	%xmm0, (%rax,%rcx,4)
LBB0_6:
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
LBB0_7:
	movl	%r8d, %edi
	andl	$-2, %edi
	xorl	%edx, %edx
	xorps	%xmm0, %xmm0
	xorl	%esi, %esi
	jmp	LBB0_8
	.p2align	4, 0x90
LBB0_12:                                ##   in Loop: Header=BB0_8 Depth=1
	addq	$2, %rsi
	cmpq	%rsi, %rdi
	je	LBB0_3
LBB0_8:                                 ## =>This Inner Loop Header: Depth=1
	movss	(%rbx,%rsi,4), %xmm1            ## xmm1 = mem[0],zero,zero,zero
	ucomiss	%xmm0, %xmm1
	jbe	LBB0_10
## %bb.9:                               ##   in Loop: Header=BB0_8 Depth=1
	movslq	%edx, %rcx
	incl	%edx
	movl	%edx, (%r14)
	movss	%xmm1, (%rax,%rcx,4)
                                        ## kill: def $edx killed $edx def $rdx
LBB0_10:                                ##   in Loop: Header=BB0_8 Depth=1
	movss	4(%rbx,%rsi,4), %xmm1           ## xmm1 = mem[0],zero,zero,zero
	ucomiss	%xmm0, %xmm1
	jbe	LBB0_12
## %bb.11:                              ##   in Loop: Header=BB0_8 Depth=1
	movslq	%edx, %rcx
	incl	%edx
	movl	%edx, (%r14)
	movss	%xmm1, (%rax,%rcx,4)
                                        ## kill: def $edx killed $edx def $rdx
	jmp	LBB0_12
	.cfi_endproc
                                        ## -- End function
.subsections_via_symbols
