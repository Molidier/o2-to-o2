# problem146/code.c
	.section	__TEXT,__text,regular,pure_instructions
	.build_version macos, 13, 0	sdk_version 13, 3
	.globl	_func0                          ; -- Begin function func0
	.p2align	2
_func0:                                 ; @func0
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	stp	x28, x27, [sp, #32]             ; 16-byte Folded Spill
	stp	x26, x25, [sp, #48]             ; 16-byte Folded Spill
	stp	x24, x23, [sp, #64]             ; 16-byte Folded Spill
	stp	x22, x21, [sp, #80]             ; 16-byte Folded Spill
	stp	x20, x19, [sp, #96]             ; 16-byte Folded Spill
	stp	x29, x30, [sp, #112]            ; 16-byte Folded Spill
	add	x29, sp, #112
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_offset w19, -24
	.cfi_offset w20, -32
	.cfi_offset w21, -40
	.cfi_offset w22, -48
	.cfi_offset w23, -56
	.cfi_offset w24, -64
	.cfi_offset w25, -72
	.cfi_offset w26, -80
	.cfi_offset w27, -88
	.cfi_offset w28, -96
	mov	x20, x1
	mov	x19, x0
Lloh0:
	adrp	x8, ___stack_chk_guard@GOTPAGE
Lloh1:
	ldr	x8, [x8, ___stack_chk_guard@GOTPAGEOFF]
Lloh2:
	ldr	x8, [x8]
	str	x8, [sp, #24]
	sbfiz	x0, x20, #2, #32
	bl	_malloc
	mov	x21, x0
	cmp	w20, #1
	b.lt	LBB0_20
; %bb.1:
	mov	x23, #0
	mov	w24, w20
	add	x25, sp, #12
	add	x26, x25, #1
	add	x27, x19, #4
	add	x28, x21, #4
Lloh3:
	adrp	x22, l_.str@PAGE
Lloh4:
	add	x22, x22, l_.str@PAGEOFF
	b	LBB0_4
LBB0_2:                                 ;   in Loop: Header=BB0_4 Depth=1
	mov	w10, #0
LBB0_3:                                 ;   in Loop: Header=BB0_4 Depth=1
	ldrsb	w8, [sp, #12]
	sub	w8, w10, w8
	add	w8, w8, #48
	ldr	w9, [x19, x23, lsl #2]
	sub	w10, w10, #48
	cmp	w9, #0
	csel	w8, w10, w8, gt
	str	w8, [x21, x23, lsl #2]
	add	x23, x23, #1
	cmp	x23, x24
	b.eq	LBB0_16
LBB0_4:                                 ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB0_10 Depth 2
                                        ;     Child Loop BB0_14 Depth 2
	ldr	w8, [x19, x23, lsl #2]
	cmp	w8, #0
	cneg	w8, w8, mi
	str	x8, [sp]
	add	x0, sp, #12
	mov	w1, #0
	mov	w2, #12
	mov	x3, x22
	bl	___sprintf_chk
	add	x0, sp, #12
	bl	_strlen
	cmp	w0, #2
	b.lt	LBB0_2
; %bb.5:                                ;   in Loop: Header=BB0_4 Depth=1
	and	x8, x0, #0xffffffff
	sub	x11, x8, #1
	cmp	x11, #8
	b.hs	LBB0_7
; %bb.6:                                ;   in Loop: Header=BB0_4 Depth=1
	mov	w10, #0
	mov	w9, #1
	b	LBB0_13
LBB0_7:                                 ;   in Loop: Header=BB0_4 Depth=1
	cmp	x11, #32
	b.hs	LBB0_9
; %bb.8:                                ;   in Loop: Header=BB0_4 Depth=1
	mov	w10, #0
	mov	w9, #1
	b	LBB0_12
LBB0_9:                                 ;   in Loop: Header=BB0_4 Depth=1
	and	x12, x11, #0xffffffffffffffe0
	orr	x9, x12, #0x1
	movi.2d	v0, #0000000000000000
	mov	x10, x12
	mov	x13, x26
	movi.2d	v1, #0000000000000000
	movi.2d	v2, #0000000000000000
	movi.2d	v3, #0000000000000000
LBB0_10:                                ;   Parent Loop BB0_4 Depth=1
                                        ; =>  This Inner Loop Header: Depth=2
	ldp	q4, q5, [x13, #-16]
	sshll.8h	v6, v4, #0
	sshll2.8h	v4, v4, #0
	sshll.8h	v7, v5, #0
	sshll2.8h	v5, v5, #0
	saddw2.4s	v0, v0, v4
	saddw.4s	v1, v1, v4
	saddw2.4s	v2, v2, v6
	saddw.4s	v3, v3, v6
	saddw2.4s	v4, v4, v5
	saddw.4s	v5, v5, v7
	add	x13, x13, #32
	subs	x10, x10, #32
	b.ne	LBB0_10
; %bb.11:                               ;   in Loop: Header=BB0_4 Depth=1
	add.4s	v0, v2, v0
	add.4s	v1, v4, v1
	add.4s	v0, v0, v1
	addv.4s	s0, v0
	fmov	w10, s0
	cmp	x11, x12
	b.eq	LBB0_3
LBB0_12:                                ;   in Loop: Header=BB0_4 Depth=1
	add	x11, x25, x9
	sub	x8, x8, x9
LBB0_13:                                ;   in Loop: Header=BB0_4 Depth=1
	add	x9, x27, x9, lsl #2
LBB0_14:                                ;   Parent Loop BB0_4 Depth=1
                                        ; =>  This Inner Loop Header: Depth=2
	ldrsb	w11, [x11], #1
	add	w10, w10, w11
	sub	w10, w10, #48
	subs	x8, x8, #1
	b.ne	LBB0_14
	b	LBB0_3
LBB0_15:                                ;   in Loop: Header=BB0_16 Depth=1
	add	w8, w8, #1
	cmp	w8, w20
	b.eq	LBB0_20
LBB0_16:                                ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB0_19 Depth 2
	cmp	w20, #1
	b.eq	LBB0_15
; %bb.17:                               ;   in Loop: Header=BB0_16 Depth=1
	ldr	w10, [x21]
	add	x9, x19, #4
	add	x11, x21, #4
	sub	x12, x24, #1
	b	LBB0_19
LBB0_18:                                ;   in Loop: Header=BB0_19 Depth=2
	stp	w13, w10, [x11, #-4]
	ldur	d0, [x9, #-4]
	rev64.2s	v0, v0
	stur	d0, [x9, #-4]
	add	x9, x9, #4
	add	x11, x11, #4
	subs	x12, x12, #1
	b.eq	LBB0_15
LBB0_19:                                ;   Parent Loop BB0_16 Depth=1
                                        ; =>  This Inner Loop Header: Depth=2
	ldr	w13, [x11]
	cmp	w10, w13
	b.gt	LBB0_18
	b	LBB0_18
LBB0_20:
	mov	x0, x21
	bl	_free
	ldr	x8, [sp, #24]
Lloh5:
	adrp	x9, ___stack_chk_guard@GOTPAGE
Lloh6:
	ldr	x9, [x9, ___stack_chk_guard@GOTPAGEOFF]
Lloh7:
	ldr	x9, [x9]
	cmp	x9, x8
	b.ne	LBB0_22
; %bb.21:
	mov	x0, x19
	ldp	x29, x30, [sp, #112]            ; 16-byte Folded Reload
	ldp	x20, x19, [sp, #96]             ; 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]             ; 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]             ; 16-byte Folded Reload
	ldp	x26, x25, [sp, #48]             ; 16-byte Folded Reload
	ldp	x28, x27, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #128
	ret
LBB0_22:
	bl	___stack_chk_fail
	.loh AdrpLdrGotLdr	Lloh0, Lloh1, Lloh2
	.loh AdrpAdd	Lloh3, Lloh4
	.loh AdrpLdrGotLdr	Lloh5, Lloh6, Lloh7
	.cfi_endproc
                                        ; -- End function
	.section	__TEXT,__cstring,cstring_literals
l_.str:                                 ; @.str
	.asciz	"%d"

	.section	__TEXT,__literal16,16byte_literals
	.p2align	4                               ; -- Begin function func0
lCPI0_0:
	.long	4294967200                      ; 0xffffffa0
	.long	4294967200                      ; 0xffffffa0
	.long	4294967200                      ; 0xffffffa0
	.long	4294967200                      ; 0xffffffa0
lCPI0_1:
	.long	4294967248                      ; 0xffffffd0
	.long	4294967248                      ; 0xffffffd0
	.long	4294967248                      ; 0xffffffd0
	.long	4294967248                      ; 0xffffffd0
	.section	__TEXT,__text,regular,pure_instructions
	.globl	_func0
	.p2align	2
_func0:                                 ; @func0
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	stp	x28, x27, [sp, #32]             ; 16-byte Folded Spill
	stp	x26, x25, [sp, #48]             ; 16-byte Folded Spill
	stp	x24, x23, [sp, #64]             ; 16-byte Folded Spill
	stp	x22, x21, [sp, #80]             ; 16-byte Folded Spill
	stp	x20, x19, [sp, #96]             ; 16-byte Folded Spill
	stp	x29, x30, [sp, #112]            ; 16-byte Folded Spill
	add	x29, sp, #112
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_offset w19, -24
	.cfi_offset w20, -32
	.cfi_offset w21, -40
	.cfi_offset w22, -48
	.cfi_offset w23, -56
	.cfi_offset w24, -64
	.cfi_offset w25, -72
	.cfi_offset w26, -80
	.cfi_offset w27, -88
	.cfi_offset w28, -96
	mov	x20, x1
	mov	x19, x0
Lloh8:
	adrp	x8, ___stack_chk_guard@GOTPAGE
Lloh9:
	ldr	x8, [x8, ___stack_chk_guard@GOTPAGEOFF]
Lloh10:
	ldr	x8, [x8]
	str	x8, [sp, #24]
	sbfiz	x0, x20, #2, #32
	bl	_malloc
	mov	x21, x0
	cmp	w20, #1
	b.lt	LBB0_20
; %bb.1:
	mov	x23, #0
	mov	w24, w20
	add	x25, sp, #12
	add	x26, x25, #1
	add	x27, x19, #4
	add	x28, x21, #4
Lloh11:
	adrp	x8, lCPI0_0@PAGE
Lloh12:
	ldr	q0, [x8, lCPI0_0@PAGEOFF]
	str	q0, [sp]                        ; 16-byte Folded Spill
Lloh13:
	adrp	x8, lCPI0_1@PAGE
Lloh14:
	ldr	q0, [x8, lCPI0_1@PAGEOFF]
	str	q0, [sp, #16]                   ; 16-byte Folded Spill
Lloh15:
	adrp	x22, l_.str@PAGE
Lloh16:
	add	x22, x22, l_.str@PAGEOFF
	b	LBB0_4
LBB0_2:                                 ;   in Loop: Header=BB0_4 Depth=1
	mov	w10, #0
LBB0_3:                                 ;   in Loop: Header=BB0_4 Depth=1
	ldrsb	w8, [sp, #12]
	sub	w8, w10, w8
	add	w8, w8, #48
	ldr	w9, [x19, x23, lsl #2]
	sub	w10, w10, #48
	cmp	w9, #0
	csel	w8, w10, w8, gt
	str	w8, [x21, x23, lsl #2]
	add	x23, x23, #1
	cmp	x23, x24
	b.eq	LBB0_16
LBB0_4:                                 ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB0_10 Depth 2
                                        ;     Child Loop BB0_14 Depth 2
	ldr	w8, [x19, x23, lsl #2]
	cmp	w8, #0
	cneg	w8, w8, mi
	str	x8, [sp]
	add	x0, sp, #12
	mov	w1, #0
	mov	w2, #12
	mov	x3, x22
	bl	___sprintf_chk
	add	x0, sp, #12
	bl	_strlen
	cmp	w0, #2
	b.lt	LBB0_2
; %bb.5:                                ;   in Loop: Header=BB0_4 Depth=1
	and	x8, x0, #0xffffffff
	sub	x11, x8, #1
	cmp	x11, #8
	b.hs	LBB0_7
; %bb.6:                                ;   in Loop: Header=BB0_4 Depth=1
	mov	w10, #0
	mov	w9, #1
	b	LBB0_13
LBB0_7:                                 ;   in Loop: Header=BB0_4 Depth=1
	cmp	x11, #32
	b.hs	LBB0_9
; %bb.8:                                ;   in Loop: Header=BB0_4 Depth=1
	mov	w10, #0
	mov	w9, #1
	b	LBB0_12
LBB0_9:                                 ;   in Loop: Header=BB0_4 Depth=1
	and	x12, x11, #0xffffffffffffffe0
	orr	x9, x12, #0x1
	movi.2d	v0, #0000000000000000
	mov	x10, x12
	mov	x13, x26
	movi.2d	v1, #0000000000000000
	movi.2d	v2, #0000000000000000
	movi.2d	v3, #0000000000000000
LBB0_10:                                ;   Parent Loop BB0_4 Depth=1
                                        ; =>  This Inner Loop Header: Depth=2
	ldp	q4, q5, [x13, #-16]
	sshll.8h	v6, v4, #0
	sshll2.8h	v4, v4, #0
	sshll.8h	v7, v5, #0
	sshll2.8h	v5, v5, #0
	saddw2.4s	v0, v0, v4
	saddw.4s	v1, v1, v4
	saddw2.4s	v2, v2, v6
	saddw.4s	v3, v3, v6
	saddw2.4s	v4, v4, v5
	saddw.4s	v5, v5, v7
	add	x13, x13, #32
	subs	x10, x10, #32
	b.ne	LBB0_10
; %bb.11:                               ;   in Loop: Header=BB0_4 Depth=1
	add.4s	v0, v2, v0
	add.4s	v1, v4, v1
	add.4s	v0, v0, v1
	addv.4s	s0, v0
	fmov	w10, s0
	cmp	x11, x12
	b.eq	LBB0_3
LBB0_12:                                ;   in Loop: Header=BB0_4 Depth=1
	add	x11, x25, x9
	sub	x8, x8, x9
LBB0_13:                                ;   in Loop: Header=BB0_4 Depth=1
	add	x9, x27, x9, lsl #2
LBB0_14:                                ;   Parent Loop BB0_4 Depth=1
                                        ; =>  This Inner Loop Header: Depth=2
	ldrsb	w11, [x11], #1
	add	w10, w10, w11
	sub	w10, w10, #48
	subs	x8, x8, #1
	b.ne	LBB0_14
	b	LBB0_3
LBB0_15:                                ;   in Loop: Header=BB0_16 Depth=1
	add	w8, w8, #1
	cmp	w8, w20
	b.eq	LBB0_20
LBB0_16:                                ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB0_19 Depth 2
	cmp	w20, #1
	b.eq	LBB0_15
; %bb.17:                               ;   in Loop: Header=BB0_16 Depth=1
	ldr	w10, [x21]
	add	x9, x19, #4
	add	x11, x21, #4
	sub	x12, x24, #1
	b	LBB0_19
LBB0_18:                                ;   in Loop: Header=BB0_19 Depth=2
	stp	w13, w10, [x11, #-4]
	ldur	d0, [x9, #-4]
	rev64.2s	v0, v0
	stur	d0, [x9, #-4]
	add	x9, x9, #4
	add	x11, x11, #4
	subs	x12, x12, #1
	b.eq	LBB0_15
LBB0_19:                                ;   Parent Loop BB0_16 Depth=1
                                        ; =>  This Inner Loop Header: Depth=2
	ldr	w13, [x11]
	cmp	w10, w13
	b.gt	LBB0_18
	b	LBB0_18
LBB0_20:
	mov	x0, x21
	bl	_free
	ldr	x8, [sp, #24]
Lloh17:
	adrp	x9, ___stack_chk_guard@GOTPAGE
Lloh18:
	ldr	x9, [x9, ___stack_chk_guard@GOTPAGEOFF]
Lloh19:
	ldr	x9, [x9]
	cmp	x9, x8
	b.ne	LBB0_22
; %bb.21:
	mov	x0, x19
	ldp	x29, x30, [sp, #112]            ; 16-byte Folded Reload
	ldp	x20, x19, [sp, #96]             ; 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]             ; 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]             ; 16-byte Folded Reload
	ldp	x26, x25, [sp, #48]             ; 16-byte Folded Reload
	ldp	x28, x27, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #128
	ret
LBB0_22:
	bl	___stack_chk_fail
	.loh AdrpLdrGotLdr	Lloh8, Lloh9, Lloh10
	.loh AdrpAdd	Lloh15, Lloh16
	.loh AdrpLdr	Lloh13, Lloh14
	.loh AdrpAdrp	Lloh11, Lloh13
	.loh AdrpLdr	Lloh11, Lloh12
	.loh AdrpLdrGotLdr	Lloh17, Lloh18, Lloh19
	.cfi_endproc
                                        ; -- End function
	.section	__TEXT,__cstring,cstring_literals
l_.str:                                 ; @.str
	.asciz	"%d"

	.section	__TEXT,__literal16,16byte_literals
	.p2align	4                               ; -- Begin function func0
lCPI0_0:
	.long	4294967200                      ; 0xffffffa0
	.long	4294967200                      ; 0xffffffa0
	.long	4294967200                      ; 0xffffffa0
	.long	4294967200                      ; 0xffffffa0
lCPI0_1:
	.long	4294967248                      ; 0xffffffd0
	.long	4294967248                      ; 0xffffffd0
	.long	4294967248                      ; 0xffffffd0
	.long	4294967248                      ; 0xffffffd0
	.section	__TEXT,__text,regular,pure_instructions
	.globl	_func0
	.p2align	2
_func0:                                 ; @func0
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	stp	x28, x27, [sp, #32]             ; 16-byte Folded Spill
	stp	x26, x25, [sp, #48]             ; 16-byte Folded Spill
	stp	x24, x23, [sp, #64]             ; 16-byte Folded Spill
	stp	x22, x21, [sp, #80]             ; 16-byte Folded Spill
	stp	x20, x19, [sp, #96]             ; 16-byte Folded Spill
	stp	x29, x30, [sp, #112]            ; 16-byte Folded Spill
	add	x29, sp, #112
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_offset w19, -24
	.cfi_offset w20, -32
	.cfi_offset w21, -40
	.cfi_offset w22, -48
	.cfi_offset w23, -56
	.cfi_offset w24, -64
	.cfi_offset w25, -72
	.cfi_offset w26, -80
	.cfi_offset w27, -88
	.cfi_offset w28, -96
	mov	x20, x1
	mov	x19, x0
Lloh20:
	adrp	x8, ___stack_chk_guard@GOTPAGE
Lloh21:
	ldr	x8, [x8, ___stack_chk_guard@GOTPAGEOFF]
Lloh22:
	ldr	x8, [x8]
	str	x8, [sp, #24]
	sbfiz	x0, x20, #2, #32
	bl	_malloc
	mov	x21, x0
	cmp	w20, #1
	b.lt	LBB0_20
; %bb.1:
	mov	x23, #0
	mov	w24, w20
	add	x25, sp, #12
	add	x26, x25, #1
	add	x27, x19, #4
	add	x28, x21, #4
Lloh23:
	adrp	x8, lCPI0_0@PAGE
Lloh24:
	ldr	q0, [x8, lCPI0_0@PAGEOFF]
	str	q0, [sp]                        ; 16-byte Folded Spill
Lloh25:
	adrp	x8, lCPI0_1@PAGE
Lloh26:
	ldr	q0, [x8, lCPI0_1@PAGEOFF]
	str	q0, [sp, #16]                   ; 16-byte Folded Spill
Lloh27:
	adrp	x22, l_.str@PAGE
Lloh28:
	add	x22, x22, l_.str@PAGEOFF
	b	LBB0_4
LBB0_2:                                 ;   in Loop: Header=BB0_4 Depth=1
	mov	w10, #0
LBB0_3:                                 ;   in Loop: Header=BB0_4 Depth=1
	ldrsb	w8, [sp, #12]
	sub	w8, w10, w8
	add	w8, w8, #48
	ldr	w9, [x19, x23, lsl #2]
	sub	w10, w10, #48
	cmp	w9, #0
	csel	w8, w10, w8, gt
	str	w8, [x21, x23, lsl #2]
	add	x23, x23, #1
	cmp	x23, x24
	b.eq	LBB0_16
LBB0_4:                                 ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB0_10 Depth 2
                                        ;     Child Loop BB0_14 Depth 2
	ldr	w8, [x19, x23, lsl #2]
	cmp	w8, #0
	cneg	w8, w8, mi
	str	x8, [sp]
	add	x0, sp, #12
	mov	w1, #0
	mov	w2, #12
	mov	x3, x22
	bl	___sprintf_chk
	add	x0, sp, #12
	bl	_strlen
	cmp	w0, #2
	b.lt	LBB0_2
; %bb.5:                                ;   in Loop: Header=BB0_4 Depth=1
	and	x8, x0, #0xffffffff
	sub	x11, x8, #1
	cmp	x11, #8
	b.hs	LBB0_7
; %bb.6:                                ;   in Loop: Header=BB0_4 Depth=1
	mov	w10, #0
	mov	w9, #1
	b	LBB0_13
LBB0_7:                                 ;   in Loop: Header=BB0_4 Depth=1
	cmp	x11, #32
	b.hs	LBB0_9
; %bb.8:                                ;   in Loop: Header=BB0_4 Depth=1
	mov	w10, #0
	mov	w9, #1
	b	LBB0_12
LBB0_9:                                 ;   in Loop: Header=BB0_4 Depth=1
	and	x12, x11, #0xffffffffffffffe0
	orr	x9, x12, #0x1
	movi.2d	v0, #0000000000000000
	mov	x10, x12
	mov	x13, x26
	movi.2d	v1, #0000000000000000
	movi.2d	v2, #0000000000000000
	movi.2d	v3, #0000000000000000
LBB0_10:                                ;   Parent Loop BB0_4 Depth=1
                                        ; =>  This Inner Loop Header: Depth=2
	ldp	q4, q5, [x13, #-16]
	sshll.8h	v6, v4, #0
	sshll2.8h	v4, v4, #0
	sshll.8h	v7, v5, #0
	sshll2.8h	v5, v5, #0
	saddw2.4s	v0, v0, v4
	saddw.4s	v1, v1, v4
	saddw2.4s	v2, v2, v6
	saddw.4s	v3, v3, v6
	saddw2.4s	v4, v4, v5
	saddw.4s	v5, v5, v7
	add	x13, x13, #32
	subs	x10, x10, #32
	b.ne	LBB0_10
; %bb.11:                               ;   in Loop: Header=BB0_4 Depth=1
	add.4s	v0, v2, v0
	add.4s	v1, v4, v1
	add.4s	v0, v0, v1
	addv.4s	s0, v0
	fmov	w10, s0
	cmp	x11, x12
	b.eq	LBB0_3
LBB0_12:                                ;   in Loop: Header=BB0_4 Depth=1
	add	x11, x25, x9
	sub	x8, x8, x9
LBB0_13:                                ;   in Loop: Header=BB0_4 Depth=1
	add	x9, x27, x9, lsl #2
LBB0_14:                                ;   Parent Loop BB0_4 Depth=1
                                        ; =>  This Inner Loop Header: Depth=2
	ldrsb	w11, [x11], #1
	add	w10, w10, w11
	sub	w10, w10, #48
	subs	x8, x8, #1
	b.ne	LBB0_14
	b	LBB0_3
LBB0_15:                                ;   in Loop: Header=BB0_16 Depth=1
	add	w8, w8, #1
	cmp	w8, w20
	b.eq	LBB0_20
LBB0_16:                                ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB0_19 Depth 2
	cmp	w20, #1
	b.eq	LBB0_15
; %bb.17:                               ;   in Loop: Header=BB0_16 Depth=1
	ldr	w10, [x21]
	add	x9, x19, #4
	add	x11, x21, #4
	sub	x12, x24, #1
	b	LBB0_19
LBB0_18:                                ;   in Loop: Header=BB0_19 Depth=2
	stp	w13, w10, [x11, #-4]
	ldur	d0, [x9, #-4]
	rev64.2s	v0, v0
	stur	d0, [x9, #-4]
	add	x9, x9, #4
	add	x11, x11, #4
	subs	x12, x12, #1
	b.eq	LBB0_15
LBB0_19:                                ;   Parent Loop BB0_16 Depth=1
                                        ; =>  This Inner Loop Header: Depth=2
	ldr	w13, [x11]
	cmp	w10, w13
	b.gt	LBB0_18
	b	LBB0_18
LBB0_20:
	mov	x0, x21
	bl	_free
	ldr	x8, [sp, #24]
Lloh29:
	adrp	x9, ___stack_chk_guard@GOTPAGE
Lloh30:
	ldr	x9, [x9, ___stack_chk_guard@GOTPAGEOFF]
Lloh31:
	ldr	x9, [x9]
	cmp	x9, x8
	b.ne	LBB0_22
; %bb.21:
	mov	x0, x19
	ldp	x29, x30, [sp, #112]            ; 16-byte Folded Reload
	ldp	x20, x19, [sp, #96]             ; 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]             ; 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]             ; 16-byte Folded Reload
	ldp	x26, x25, [sp, #48]             ; 16-byte Folded Reload
	ldp	x28, x27, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #128
	ret
LBB0_22:
	bl	___stack_chk_fail
	.loh AdrpLdrGotLdr	Lloh20, Lloh21, Lloh22
	.loh AdrpAdd	Lloh27, Lloh28
	.loh AdrpLdr	Lloh25, Lloh26
	.loh AdrpAdrp	Lloh23, Lloh25
	.loh AdrpLdr	Lloh23, Lloh24
	.loh AdrpLdrGotLdr	Lloh29, Lloh30, Lloh31
	.cfi_endproc
                                        ; -- End function
	.section	__TEXT,__cstring,cstring_literals
l_.str:                                 ; @.str
	.asciz	"%d"

	.section	__TEXT,__literal16,16byte_literals
	.p2align	4                               ; -- Begin function func0
lCPI0_0:
	.long	4294967200                      ; 0xffffffa0
	.long	4294967200                      ; 0xffffffa0
	.long	4294967200                      ; 0xffffffa0
	.long	4294967200                      ; 0xffffffa0
lCPI0_1:
	.long	4294967248                      ; 0xffffffd0
	.long	4294967248                      ; 0xffffffd0
	.long	4294967248                      ; 0xffffffd0
	.long	4294967248                      ; 0xffffffd0
	.section	__TEXT,__text,regular,pure_instructions
	.globl	_func0
	.p2align	2
_func0:                                 ; @func0
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	stp	x28, x27, [sp, #32]             ; 16-byte Folded Spill
	stp	x26, x25, [sp, #48]             ; 16-byte Folded Spill
	stp	x24, x23, [sp, #64]             ; 16-byte Folded Spill
	stp	x22, x21, [sp, #80]             ; 16-byte Folded Spill
	stp	x20, x19, [sp, #96]             ; 16-byte Folded Spill
	stp	x29, x30, [sp, #112]            ; 16-byte Folded Spill
	add	x29, sp, #112
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_offset w19, -24
	.cfi_offset w20, -32
	.cfi_offset w21, -40
	.cfi_offset w22, -48
	.cfi_offset w23, -56
	.cfi_offset w24, -64
	.cfi_offset w25, -72
	.cfi_offset w26, -80
	.cfi_offset w27, -88
	.cfi_offset w28, -96
	mov	x20, x1
	mov	x19, x0
Lloh32:
	adrp	x8, ___stack_chk_guard@GOTPAGE
Lloh33:
	ldr	x8, [x8, ___stack_chk_guard@GOTPAGEOFF]
Lloh34:
	ldr	x8, [x8]
	str	x8, [sp, #24]
	sbfiz	x0, x20, #2, #32
	bl	_malloc
	mov	x21, x0
	cmp	w20, #1
	b.lt	LBB0_20
; %bb.1:
	mov	x23, #0
	mov	w24, w20
	add	x25, sp, #12
	add	x26, x25, #1
	add	x27, x19, #4
	add	x28, x21, #4
Lloh35:
	adrp	x8, lCPI0_0@PAGE
Lloh36:
	ldr	q0, [x8, lCPI0_0@PAGEOFF]
	str	q0, [sp]                        ; 16-byte Folded Spill
Lloh37:
	adrp	x8, lCPI0_1@PAGE
Lloh38:
	ldr	q0, [x8, lCPI0_1@PAGEOFF]
	str	q0, [sp, #16]                   ; 16-byte Folded Spill
Lloh39:
	adrp	x22, l_.str@PAGE
Lloh40:
	add	x22, x22, l_.str@PAGEOFF
	b	LBB0_4
LBB0_2:                                 ;   in Loop: Header=BB0_4 Depth=1
	mov	w10, #0
LBB0_3:                                 ;   in Loop: Header=BB0_4 Depth=1
	ldrsb	w8, [sp, #12]
	sub	w8, w10, w8
	add	w8, w8, #48
	ldr	w9, [x19, x23, lsl #2]
	sub	w10, w10, #48
	cmp	w9, #0
	csel	w8, w10, w8, gt
	str	w8, [x21, x23, lsl #2]
	add	x23, x23, #1
	cmp	x23, x24
	b.eq	LBB0_16
LBB0_4:                                 ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB0_10 Depth 2
                                        ;     Child Loop BB0_14 Depth 2
	ldr	w8, [x19, x23, lsl #2]
	cmp	w8, #0
	cneg	w8, w8, mi
	str	x8, [sp]
	add	x0, sp, #12
	mov	w1, #0
	mov	w2, #12
	mov	x3, x22
	bl	___sprintf_chk
	add	x0, sp, #12
	bl	_strlen
	cmp	w0, #2
	b.lt	LBB0_2
; %bb.5:                                ;   in Loop: Header=BB0_4 Depth=1
	and	x8, x0, #0xffffffff
	sub	x11, x8, #1
	cmp	x11, #8
	b.hs	LBB0_7
; %bb.6:                                ;   in Loop: Header=BB0_4 Depth=1
	mov	w10, #0
	mov	w9, #1
	b	LBB0_13
LBB0_7:                                 ;   in Loop: Header=BB0_4 Depth=1
	cmp	x11, #32
	b.hs	LBB0_9
; %bb.8:                                ;   in Loop: Header=BB0_4 Depth=1
	mov	w10, #0
	mov	w9, #1
	b	LBB0_12
LBB0_9:                                 ;   in Loop: Header=BB0_4 Depth=1
	and	x12, x11, #0xffffffffffffffe0
	orr	x9, x12, #0x1
	movi.2d	v0, #0000000000000000
	mov	x10, x12
	mov	x13, x26
	movi.2d	v1, #0000000000000000
	movi.2d	v2, #0000000000000000
	movi.2d	v3, #0000000000000000
LBB0_10:                                ;   Parent Loop BB0_4 Depth=1
                                        ; =>  This Inner Loop Header: Depth=2
	ldp	q4, q5, [x13, #-16]
	sshll.8h	v6, v4, #0
	sshll2.8h	v4, v4, #0
	sshll.8h	v7, v5, #0
	sshll2.8h	v5, v5, #0
	saddw2.4s	v0, v0, v4
	saddw.4s	v1, v1, v4
	saddw2.4s	v2, v2, v6
	saddw.4s	v3, v3, v6
	saddw2.4s	v4, v4, v5
	saddw.4s	v5, v5, v7
	add	x13, x13, #32
	subs	x10, x10, #32
	b.ne	LBB0_10
; %bb.11:                               ;   in Loop: Header=BB0_4 Depth=1
	add.4s	v0, v2, v0
	add.4s	v1, v4, v1
	add.4s	v0, v0, v1
	addv.4s	s0, v0
	fmov	w10, s0
	cmp	x11, x12
	b.eq	LBB0_3
LBB0_12:                                ;   in Loop: Header=BB0_4 Depth=1
	add	x11, x25, x9
	sub	x8, x8, x9
LBB0_13:                                ;   in Loop: Header=BB0_4 Depth=1
	add	x9, x27, x9, lsl #2
LBB0_14:                                ;   Parent Loop BB0_4 Depth=1
                                        ; =>  This Inner Loop Header: Depth=2
	ldrsb	w11, [x11], #1
	add	w10, w10, w11
	sub	w10, w10, #48
	subs	x8, x8, #1
	b.ne	LBB0_14
	b	LBB0_3
LBB0_15:                                ;   in Loop: Header=BB0_16 Depth=1
	add	w8, w8, #1
	cmp	w8, w20
	b.eq	LBB0_20
LBB0_16:                                ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB0_19 Depth 2
	cmp	w20, #1
	b.eq	LBB0_15
; %bb.17:                               ;   in Loop: Header=BB0_16 Depth=1
	ldr	w10, [x21]
	add	x9, x19, #4
	add	x11, x21, #4
	sub	x12, x24, #1
	b	LBB0_19
LBB0_18:                                ;   in Loop: Header=BB0_19 Depth=2
	stp	w13, w10, [x11, #-4]
	ldur	d0, [x9, #-4]
	rev64.2s	v0, v0
	stur	d0, [x9, #-4]
	add	x9, x9, #4
	add	x11, x11, #4
	subs	x12, x12, #1
	b.eq	LBB0_15
LBB0_19:                                ;   Parent Loop BB0_16 Depth=1
                                        ; =>  This Inner Loop Header: Depth=2
	ldr	w13, [x11]
	cmp	w10, w13
	b.gt	LBB0_18
	b	LBB0_18
LBB0_20:
	mov	x0, x21
	bl	_free
	ldr	x8, [sp, #24]
Lloh41:
	adrp	x9, ___stack_chk_guard@GOTPAGE
Lloh42:
	ldr	x9, [x9, ___stack_chk_guard@GOTPAGEOFF]
Lloh43:
	ldr	x9, [x9]
	cmp	x9, x8
	b.ne	LBB0_22
; %bb.21:
	mov	x0, x19
	ldp	x29, x30, [sp, #112]            ; 16-byte Folded Reload
	ldp	x20, x19, [sp, #96]             ; 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]             ; 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]             ; 16-byte Folded Reload
	ldp	x26, x25, [sp, #48]             ; 16-byte Folded Reload
	ldp	x28, x27, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #128
	ret
LBB0_22:
	bl	___stack_chk_fail
	.loh AdrpLdrGotLdr	Lloh32, Lloh33, Lloh34
	.loh AdrpAdd	Lloh39, Lloh40
	.loh AdrpLdr	Lloh37, Lloh38
	.loh AdrpAdrp	Lloh35, Lloh37
	.loh AdrpLdr	Lloh35, Lloh36
	.loh AdrpLdrGotLdr	Lloh41, Lloh42, Lloh43
	.cfi_endproc
                                        ; -- End function
	.section	__TEXT,__cstring,cstring_literals
l_.str:                                 ; @.str
	.asciz	"%d"

	.section	__TEXT,__literal16,16byte_literals
	.p2align	4                               ; -- Begin function func0
lCPI0_0:
	.long	4294967200                      ; 0xffffffa0
	.long	4294967200                      ; 0xffffffa0
	.long	4294967200                      ; 0xffffffa0
	.long	4294967200                      ; 0xffffffa0
lCPI0_1:
	.long	4294967248                      ; 0xffffffd0
	.long	4294967248                      ; 0xffffffd0
	.long	4294967248                      ; 0xffffffd0
	.long	4294967248                      ; 0xffffffd0
	.section	__TEXT,__text,regular,pure_instructions
	.globl	_func0
	.p2align	2
_func0:                                 ; @func0
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	stp	x28, x27, [sp, #32]             ; 16-byte Folded Spill
	stp	x26, x25, [sp, #48]             ; 16-byte Folded Spill
	stp	x24, x23, [sp, #64]             ; 16-byte Folded Spill
	stp	x22, x21, [sp, #80]             ; 16-byte Folded Spill
	stp	x20, x19, [sp, #96]             ; 16-byte Folded Spill
	stp	x29, x30, [sp, #112]            ; 16-byte Folded Spill
	add	x29, sp, #112
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_offset w19, -24
	.cfi_offset w20, -32
	.cfi_offset w21, -40
	.cfi_offset w22, -48
	.cfi_offset w23, -56
	.cfi_offset w24, -64
	.cfi_offset w25, -72
	.cfi_offset w26, -80
	.cfi_offset w27, -88
	.cfi_offset w28, -96
	mov	x20, x1
	mov	x19, x0
Lloh44:
	adrp	x8, ___stack_chk_guard@GOTPAGE
Lloh45:
	ldr	x8, [x8, ___stack_chk_guard@GOTPAGEOFF]
Lloh46:
	ldr	x8, [x8]
	str	x8, [sp, #24]
	sbfiz	x0, x20, #2, #32
	bl	_malloc
	mov	x21, x0
	cmp	w20, #1
	b.lt	LBB0_20
; %bb.1:
	mov	x23, #0
	mov	w24, w20
	add	x25, sp, #12
	add	x26, x25, #1
	add	x27, x19, #4
	add	x28, x21, #4
Lloh47:
	adrp	x8, lCPI0_0@PAGE
Lloh48:
	ldr	q0, [x8, lCPI0_0@PAGEOFF]
	str	q0, [sp]                        ; 16-byte Folded Spill
Lloh49:
	adrp	x8, lCPI0_1@PAGE
Lloh50:
	ldr	q0, [x8, lCPI0_1@PAGEOFF]
	str	q0, [sp, #16]                   ; 16-byte Folded Spill
Lloh51:
	adrp	x22, l_.str@PAGE
Lloh52:
	add	x22, x22, l_.str@PAGEOFF
	b	LBB0_4
LBB0_2:                                 ;   in Loop: Header=BB0_4 Depth=1
	mov	w10, #0
LBB0_3:                                 ;   in Loop: Header=BB0_4 Depth=1
	ldrsb	w8, [sp, #12]
	sub	w8, w10, w8
	add	w8, w8, #48
	ldr	w9, [x19, x23, lsl #2]
	sub	w10, w10, #48
	cmp	w9, #0
	csel	w8, w10, w8, gt
	str	w8, [x21, x23, lsl #2]
	add	x23, x23, #1
	cmp	x23, x24
	b.eq	LBB0_16
LBB0_4:                                 ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB0_10 Depth 2
                                        ;     Child Loop BB0_14 Depth 2
	ldr	w8, [x19, x23, lsl #2]
	cmp	w8, #0
	cneg	w8, w8, mi
	str	x8, [sp]
	add	x0, sp, #12
	mov	w1, #0
	mov	w2, #12
	mov	x3, x22
	bl	___sprintf_chk
	add	x0, sp, #12
	bl	_strlen
	cmp	w0, #2
	b.lt	LBB0_2
; %bb.5:                                ;   in Loop: Header=BB0_4 Depth=1
	and	x8, x0, #0xffffffff
	sub	x11, x8, #1
	cmp	x11, #8
	b.hs	LBB0_7
; %bb.6:                                ;   in Loop: Header=BB0_4 Depth=1
	mov	w10, #0
	mov	w9, #1
	b	LBB0_13
LBB0_7:                                 ;   in Loop: Header=BB0_4 Depth=1
	cmp	x11, #32
	b.hs	LBB0_9
; %bb.8:                                ;   in Loop: Header=BB0_4 Depth=1
	mov	w10, #0
	mov	w9, #1
	b	LBB0_12
LBB0_9:                                 ;   in Loop: Header=BB0_4 Depth=1
	and	x12, x11, #0xffffffffffffffe0
	orr	x9, x12, #0x1
	movi.2d	v0, #0000000000000000
	mov	x10, x12
	mov	x13, x26
	movi.2d	v1, #0000000000000000
	movi.2d	v2, #0000000000000000
	movi.2d	v3, #0000000000000000
LBB0_10:                                ;   Parent Loop BB0_4 Depth=1
                                        ; =>  This Inner Loop Header: Depth=2
	ldp	q4, q5, [x13, #-16]
	sshll.8h	v6, v4, #0
	sshll2.8h	v4, v4, #0
	sshll.8h	v7, v5, #0
	sshll2.8h	v5, v5, #0
	saddw2.4s	v0, v0, v4
	saddw.4s	v1, v1, v4
	saddw2.4s	v2, v2, v6
	saddw.4s	v3, v3, v6
	saddw2.4s	v4, v4, v5
	saddw.4s	v5, v5, v7
	add	x13, x13, #32
	subs	x10, x10, #32
	b.ne	LBB0_10
; %bb.11:                               ;   in Loop: Header=BB0_4 Depth=1
	add.4s	v0, v2, v0
	add.4s	v1, v4, v1
	add.4s	v0, v0, v1
	addv.4s	s0, v0
	fmov	w10, s0
	cmp	x11, x12
	b.eq	LBB0_3
LBB0_12:                                ;   in Loop: Header=BB0_4 Depth=1
	add	x11, x25, x9
	sub	x8, x8, x9
LBB0_13:                                ;   in Loop: Header=BB0_4 Depth=1
	add	x9, x27, x9, lsl #2
LBB0_14:                                ;   Parent Loop BB0_4 Depth=1
                                        ; =>  This Inner Loop Header: Depth=2
	ldrsb	w11, [x11], #1
	add	w10, w10, w11
	sub	w10, w10, #48
	subs	x8, x8, #1
	b.ne	LBB0_14
	b	LBB0_3
LBB0_15:                                ;   in Loop: Header=BB0_16 Depth=1
	add	w8, w8, #1
	cmp	w8, w20
	b.eq	LBB0_20
LBB0_16:                                ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB0_19 Depth 2
	cmp	w20, #1
	b.eq	LBB0_15
; %bb.17:                               ;   in Loop: Header=BB0_16 Depth=1
	ldr	w10, [x21]
	add	x9, x19, #4
	add	x11, x21, #4
	sub	x12, x24, #1
	b	LBB0_19
LBB0_18:                                ;   in Loop: Header=BB0_19 Depth=2
	stp	w13, w10, [x11, #-4]
	ldur	d0, [x9, #-4]
	rev64.2s	v0, v0
	stur	d0, [x9, #-4]
	add	x9, x9, #4
	add	x11, x11, #4
	subs	x12, x12, #1
	b.eq	LBB0_15
LBB0_19:                                ;   Parent Loop BB0_16 Depth=1
                                        ; =>  This Inner Loop Header: Depth=2
	ldr	w13, [x11]
	cmp	w10, w13
	b.gt	LBB0_18
	b	LBB0_18
LBB0_20:
	mov	x0, x21
	bl	_free
	ldr	x8, [sp, #24]
Lloh53:
	adrp	x9, ___stack_chk_guard@GOTPAGE
Lloh54:
	ldr	x9, [x9, ___stack_chk_guard@GOTPAGEOFF]
Lloh55:
	ldr	x9, [x9]
	cmp	x9, x8
	b.ne	LBB0_22
; %bb.21:
	mov	x0, x19
	ldp	x29, x30, [sp, #112]            ; 16-byte Folded Reload
	ldp	x20, x19, [sp, #96]             ; 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]             ; 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]             ; 16-byte Folded Reload
	ldp	x26, x25, [sp, #48]             ; 16-byte Folded Reload
	ldp	x28, x27, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #128
	ret
LBB0_22:
	bl	___stack_chk_fail
	.loh AdrpLdrGotLdr	Lloh44, Lloh45, Lloh46
	.loh AdrpAdd	Lloh51, Lloh52
	.loh AdrpLdr	Lloh49, Lloh50
	.loh AdrpAdrp	Lloh47, Lloh49
	.loh AdrpLdr	Lloh47, Lloh48
	.loh AdrpLdrGotLdr	Lloh53, Lloh54, Lloh55
	.cfi_endproc
                                        ; -- End function
	.section	__TEXT,__cstring,cstring_literals
l_.str:                                 ; @.str
	.asciz	"%d"

	.section	__TEXT,__literal16,16byte_literals
	.p2align	4                               ; -- Begin function func0
lCPI0_0:
	.long	4294967200                      ; 0xffffffa0
	.long	4294967200                      ; 0xffffffa0
	.long	4294967200                      ; 0xffffffa0
	.long	4294967200                      ; 0xffffffa0
lCPI0_1:
	.long	4294967248                      ; 0xffffffd0
	.long	4294967248                      ; 0xffffffd0
	.long	4294967248                      ; 0xffffffd0
	.long	4294967248                      ; 0xffffffd0
	.section	__TEXT,__text,regular,pure_instructions
	.globl	_func0
	.p2align	2
_func0:                                 ; @func0
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	stp	x28, x27, [sp, #32]             ; 16-byte Folded Spill
	stp	x26, x25, [sp, #48]             ; 16-byte Folded Spill
	stp	x24, x23, [sp, #64]             ; 16-byte Folded Spill
	stp	x22, x21, [sp, #80]             ; 16-byte Folded Spill
	stp	x20, x19, [sp, #96]             ; 16-byte Folded Spill
	stp	x29, x30, [sp, #112]            ; 16-byte Folded Spill
	add	x29, sp, #112
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_offset w19, -24
	.cfi_offset w20, -32
	.cfi_offset w21, -40
	.cfi_offset w22, -48
	.cfi_offset w23, -56
	.cfi_offset w24, -64
	.cfi_offset w25, -72
	.cfi_offset w26, -80
	.cfi_offset w27, -88
	.cfi_offset w28, -96
	mov	x20, x1
	mov	x19, x0
Lloh56:
	adrp	x8, ___stack_chk_guard@GOTPAGE
Lloh57:
	ldr	x8, [x8, ___stack_chk_guard@GOTPAGEOFF]
Lloh58:
	ldr	x8, [x8]
	str	x8, [sp, #24]
	sbfiz	x0, x20, #2, #32
	bl	_malloc
	mov	x21, x0
	cmp	w20, #1
	b.lt	LBB0_20
; %bb.1:
	mov	x23, #0
	mov	w24, w20
	add	x25, sp, #12
	add	x26, x25, #1
	add	x27, x19, #4
	add	x28, x21, #4
Lloh59:
	adrp	x8, lCPI0_0@PAGE
Lloh60:
	ldr	q0, [x8, lCPI0_0@PAGEOFF]
	str	q0, [sp]                        ; 16-byte Folded Spill
Lloh61:
	adrp	x8, lCPI0_1@PAGE
Lloh62:
	ldr	q0, [x8, lCPI0_1@PAGEOFF]
	str	q0, [sp, #16]                   ; 16-byte Folded Spill
Lloh63:
	adrp	x22, l_.str@PAGE
Lloh64:
	add	x22, x22, l_.str@PAGEOFF
	b	LBB0_4
LBB0_2:                                 ;   in Loop: Header=BB0_4 Depth=1
	mov	w10, #0
LBB0_3:                                 ;   in Loop: Header=BB0_4 Depth=1
	ldrsb	w8, [sp, #12]
	sub	w8, w10, w8
	add	w8, w8, #48
	ldr	w9, [x19, x23, lsl #2]
	sub	w10, w10, #48
	cmp	w9, #0
	csel	w8, w10, w8, gt
	str	w8, [x21, x23, lsl #2]
	add	x23, x23, #1
	cmp	x23, x24
	b.eq	LBB0_16
LBB0_4:                                 ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB0_10 Depth 2
                                        ;     Child Loop BB0_14 Depth 2
	ldr	w8, [x19, x23, lsl #2]
	cmp	w8, #0
	cneg	w8, w8, mi
	str	x8, [sp]
	add	x0, sp, #12
	mov	w1, #0
	mov	w2, #12
	mov	x3, x22
	bl	___sprintf_chk
	add	x0, sp, #12
	bl	_strlen
	cmp	w0, #2
	b.lt	LBB0_2
; %bb.5:                                ;   in Loop: Header=BB0_4 Depth=1
	and	x8, x0, #0xffffffff
	sub	x11, x8, #1
	cmp	x11, #8
	b.hs	LBB0_7
; %bb.6:                                ;   in Loop: Header=BB0_4 Depth=1
	mov	w10, #0
	mov	w9, #1
	b	LBB0_13
LBB0_7:                                 ;   in Loop: Header=BB0_4 Depth=1
	cmp	x11, #32
	b.hs	LBB0_9
; %bb.8:                                ;   in Loop: Header=BB0_4 Depth=1
	mov	w10, #0
	mov	w9, #1
	b	LBB0_12
LBB0_9:                                 ;   in Loop: Header=BB0_4 Depth=1
	and	x12, x11, #0xffffffffffffffe0
	orr	x9, x12, #0x1
	movi.2d	v0, #0000000000000000
	mov	x10, x12
	mov	x13, x26
	movi.2d	v1, #0000000000000000
	movi.2d	v2, #0000000000000000
	movi.2d	v3, #0000000000000000
LBB0_10:                                ;   Parent Loop BB0_4 Depth=1
                                        ; =>  This Inner Loop Header: Depth=2
	ldp	q4, q5, [x13, #-16]
	sshll.8h	v6, v4, #0
	sshll2.8h	v4, v4, #0
	sshll.8h	v7, v5, #0
	sshll2.8h	v5, v5, #0
	saddw2.4s	v0, v0, v4
	saddw.4s	v1, v1, v4
	saddw2.4s	v2, v2, v6
	saddw.4s	v3, v3, v6
	saddw2.4s	v4, v4, v5
	saddw.4s	v5, v5, v7
	add	x13, x13, #32
	subs	x10, x10, #32
	b.ne	LBB0_10
; %bb.11:                               ;   in Loop: Header=BB0_4 Depth=1
	add.4s	v0, v2, v0
	add.4s	v1, v4, v1
	add.4s	v0, v0, v1
	addv.4s	s0, v0
	fmov	w10, s0
	cmp	x11, x12
	b.eq	LBB0_3
LBB0_12:                                ;   in Loop: Header=BB0_4 Depth=1
	add	x11, x25, x9
	sub	x8, x8, x9
LBB0_13:                                ;   in Loop: Header=BB0_4 Depth=1
	add	x9, x27, x9, lsl #2
LBB0_14:                                ;   Parent Loop BB0_4 Depth=1
                                        ; =>  This Inner Loop Header: Depth=2
	ldrsb	w11, [x11], #1
	add	w10, w10, w11
	sub	w10, w10, #48
	subs	x8, x8, #1
	b.ne	LBB0_14
	b	LBB0_3
LBB0_15:                                ;   in Loop: Header=BB0_16 Depth=1
	add	w8, w8, #1
	cmp	w8, w20
	b.eq	LBB0_20
LBB0_16:                                ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB0_19 Depth 2
	cmp	w20, #1
	b.eq	LBB0_15
; %bb.17:                               ;   in Loop: Header=BB0_16 Depth=1
	ldr	w10, [x21]
	add	x9, x19, #4
	add	x11, x21, #4
	sub	x12, x24, #1
	b	LBB0_19
LBB0_18:                                ;   in Loop: Header=BB0_19 Depth=2
	stp	w13, w10, [x11, #-4]
	ldur	d0, [x9, #-4]
	rev64.2s	v0, v0
	stur	d0, [x9, #-4]
	add	x9, x9, #4
	add	x11, x11, #4
	subs	x12, x12, #1
	b.eq	LBB0_15
LBB0_19:                                ;   Parent Loop BB0_16 Depth=1
                                        ; =>  This Inner Loop Header: Depth=2
	ldr	w13, [x11]
	cmp	w10, w13
	b.gt	LBB0_18
	b	LBB0_18
LBB0_20:
	mov	x0, x21
	bl	_free
	ldr	x8, [sp, #24]
Lloh65:
	adrp	x9, ___stack_chk_guard@GOTPAGE
Lloh66:
	ldr	x9, [x9, ___stack_chk_guard@GOTPAGEOFF]
Lloh67:
	ldr	x9, [x9]
	cmp	x9, x8
	b.ne	LBB0_22
; %bb.21:
	mov	x0, x19
	ldp	x29, x30, [sp, #112]            ; 16-byte Folded Reload
	ldp	x20, x19, [sp, #96]             ; 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]             ; 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]             ; 16-byte Folded Reload
	ldp	x26, x25, [sp, #48]             ; 16-byte Folded Reload
	ldp	x28, x27, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #128
	ret
LBB0_22:
	bl	___stack_chk_fail
	.loh AdrpLdrGotLdr	Lloh56, Lloh57, Lloh58
	.loh AdrpAdd	Lloh63, Lloh64
	.loh AdrpLdr	Lloh61, Lloh62
	.loh AdrpAdrp	Lloh59, Lloh61
	.loh AdrpLdr	Lloh59, Lloh60
	.loh AdrpLdrGotLdr	Lloh65, Lloh66, Lloh67
	.cfi_endproc
                                        ; -- End function
	.section	__TEXT,__cstring,cstring_literals
l_.str:                                 ; @.str
	.asciz	"%d"

	.section	__TEXT,__literal16,16byte_literals
	.p2align	4                               ; -- Begin function func0
lCPI0_0:
	.long	4294967200                      ; 0xffffffa0
	.long	4294967200                      ; 0xffffffa0
	.long	4294967200                      ; 0xffffffa0
	.long	4294967200                      ; 0xffffffa0
lCPI0_1:
	.long	4294967248                      ; 0xffffffd0
	.long	4294967248                      ; 0xffffffd0
	.long	4294967248                      ; 0xffffffd0
	.long	4294967248                      ; 0xffffffd0
	.section	__TEXT,__text,regular,pure_instructions
	.globl	_func0
	.p2align	2
_func0:                                 ; @func0
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	stp	x28, x27, [sp, #32]             ; 16-byte Folded Spill
	stp	x26, x25, [sp, #48]             ; 16-byte Folded Spill
	stp	x24, x23, [sp, #64]             ; 16-byte Folded Spill
	stp	x22, x21, [sp, #80]             ; 16-byte Folded Spill
	stp	x20, x19, [sp, #96]             ; 16-byte Folded Spill
	stp	x29, x30, [sp, #112]            ; 16-byte Folded Spill
	add	x29, sp, #112
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_offset w19, -24
	.cfi_offset w20, -32
	.cfi_offset w21, -40
	.cfi_offset w22, -48
	.cfi_offset w23, -56
	.cfi_offset w24, -64
	.cfi_offset w25, -72
	.cfi_offset w26, -80
	.cfi_offset w27, -88
	.cfi_offset w28, -96
	mov	x20, x1
	mov	x19, x0
Lloh68:
	adrp	x8, ___stack_chk_guard@GOTPAGE
Lloh69:
	ldr	x8, [x8, ___stack_chk_guard@GOTPAGEOFF]
Lloh70:
	ldr	x8, [x8]
	str	x8, [sp, #24]
	sbfiz	x0, x20, #2, #32
	bl	_malloc
	mov	x21, x0
	cmp	w20, #1
	b.lt	LBB0_20
; %bb.1:
	mov	x23, #0
	mov	w24, w20
	add	x25, sp, #12
	add	x26, x25, #1
	add	x27, x19, #4
	add	x28, x21, #4
Lloh71:
	adrp	x8, lCPI0_0@PAGE
Lloh72:
	ldr	q0, [x8, lCPI0_0@PAGEOFF]
	str	q0, [sp]                        ; 16-byte Folded Spill
Lloh73:
	adrp	x8, lCPI0_1@PAGE
Lloh74:
	ldr	q0, [x8, lCPI0_1@PAGEOFF]
	str	q0, [sp, #16]                   ; 16-byte Folded Spill
Lloh75:
	adrp	x22, l_.str@PAGE
Lloh76:
	add	x22, x22, l_.str@PAGEOFF
	b	LBB0_4
LBB0_2:                                 ;   in Loop: Header=BB0_4 Depth=1
	mov	w10, #0
LBB0_3:                                 ;   in Loop: Header=BB0_4 Depth=1
	ldrsb	w8, [sp, #12]
	sub	w8, w10, w8
	add	w8, w8, #48
	ldr	w9, [x19, x23, lsl #2]
	sub	w10, w10, #48
	cmp	w9, #0
	csel	w8, w10, w8, gt
	str	w8, [x21, x23, lsl #2]
	add	x23, x23, #1
	cmp	x23, x24
	b.eq	LBB0_16
LBB0_4:                                 ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB0_10 Depth 2
                                        ;     Child Loop BB0_14 Depth 2
	ldr	w8, [x19, x23, lsl #2]
	cmp	w8, #0
	cneg	w8, w8, mi
	str	x8, [sp]
	add	x0, sp, #12
	mov	w1, #0
	mov	w2, #12
	mov	x3, x22
	bl	___sprintf_chk
	add	x0, sp, #12
	bl	_strlen
	cmp	w0, #2
	b.lt	LBB0_2
; %bb.5:                                ;   in Loop: Header=BB0_4 Depth=1
	and	x8, x0, #0xffffffff
	sub	x11, x8, #1
	cmp	x11, #8
	b.hs	LBB0_7
; %bb.6:                                ;   in Loop: Header=BB0_4 Depth=1
	mov	w10, #0
	mov	w9, #1
	b	LBB0_13
LBB0_7:                                 ;   in Loop: Header=BB0_4 Depth=1
	cmp	x11, #32
	b.hs	LBB0_9
; %bb.8:                                ;   in Loop: Header=BB0_4 Depth=1
	mov	w10, #0
	mov	w9, #1
	b	LBB0_12
LBB0_9:                                 ;   in Loop: Header=BB0_4 Depth=1
	and	x12, x11, #0xffffffffffffffe0
	orr	x9, x12, #0x1
	movi.2d	v0, #0000000000000000
	mov	x10, x12
	mov	x13, x26
	movi.2d	v1, #0000000000000000
	movi.2d	v2, #0000000000000000
	movi.2d	v3, #0000000000000000
LBB0_10:                                ;   Parent Loop BB0_4 Depth=1
                                        ; =>  This Inner Loop Header: Depth=2
	ldp	q4, q5, [x13, #-16]
	sshll.8h	v6, v4, #0
	sshll2.8h	v4, v4, #0
	sshll.8h	v7, v5, #0
	sshll2.8h	v5, v5, #0
	saddw2.4s	v0, v0, v4
	saddw.4s	v1, v1, v4
	saddw2.4s	v2, v2, v6
	saddw.4s	v3, v3, v6
	saddw2.4s	v4, v4, v5
	saddw.4s	v5, v5, v7
	add	x13, x13, #32
	subs	x10, x10, #32
	b.ne	LBB0_10
; %bb.11:                               ;   in Loop: Header=BB0_4 Depth=1
	add.4s	v0, v2, v0
	add.4s	v1, v4, v1
	add.4s	v0, v0, v1
	addv.4s	s0, v0
	fmov	w10, s0
	cmp	x11, x12
	b.eq	LBB0_3
LBB0_12:                                ;   in Loop: Header=BB0_4 Depth=1
	add	x11, x25, x9
	sub	x8, x8, x9
LBB0_13:                                ;   in Loop: Header=BB0_4 Depth=1
	add	x9, x27, x9, lsl #2
LBB0_14:                                ;   Parent Loop BB0_4 Depth=1
                                        ; =>  This Inner Loop Header: Depth=2
	ldrsb	w11, [x11], #1
	add	w10, w10, w11
	sub	w10, w10, #48
	subs	x8, x8, #1
	b.ne	LBB0_14
	b	LBB0_3
LBB0_15:                                ;   in Loop: Header=BB0_16 Depth=1
	add	w8, w8, #1
	cmp	w8, w20
	b.eq	LBB0_20
LBB0_16:                                ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB0_19 Depth 2
	cmp	w20, #1
	b.eq	LBB0_15
; %bb.17:                               ;   in Loop: Header=BB0_16 Depth=1
	ldr	w10, [x21]
	add	x9, x19, #4
	add	x11, x21, #4
	sub	x12, x24, #1
	b	LBB0_19
LBB0_18:                                ;   in Loop: Header=BB0_19 Depth=2
	stp	w13, w10, [x11, #-4]
	ldur	d0, [x9, #-4]
	rev64.2s	v0, v0
	stur	d0, [x9, #-4]
	add	x9, x9, #4
	add	x11, x11, #4
	subs	x12, x12, #1
	b.eq	LBB0_15
LBB0_19:                                ;   Parent Loop BB0_16 Depth=1
                                        ; =>  This Inner Loop Header: Depth=2
	ldr	w13, [x11]
	cmp	w10, w13
	b.gt	LBB0_18
	b	LBB0_18
LBB0_20:
	mov	x0, x21
	bl	_free
	ldr	x8, [sp, #24]
Lloh77:
	adrp	x9, ___stack_chk_guard@GOTPAGE
Lloh78:
	ldr	x9, [x9, ___stack_chk_guard@GOTPAGEOFF]
Lloh79:
	ldr	x9, [x9]
	cmp	x9, x8
	b.ne	LBB0_22
; %bb.21:
	mov	x0, x19
	ldp	x29, x30, [sp, #112]            ; 16-byte Folded Reload
	ldp	x20, x19, [sp, #96]             ; 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]             ; 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]             ; 16-byte Folded Reload
	ldp	x26, x25, [sp, #48]             ; 16-byte Folded Reload
	ldp	x28, x27, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #128
	ret
LBB0_22:
	bl	___stack_chk_fail
	.loh AdrpLdrGotLdr	Lloh68, Lloh69, Lloh70
	.loh AdrpAdd	Lloh75, Lloh76
	.loh AdrpLdr	Lloh73, Lloh74
	.loh AdrpAdrp	Lloh71, Lloh73
	.loh AdrpLdr	Lloh71, Lloh72
	.loh AdrpLdrGotLdr	Lloh77, Lloh78, Lloh79
	.cfi_endproc
                                        ; -- End function
	.section	__TEXT,__cstring,cstring_literals
l_.str:                                 ; @.str
	.asciz	"%d"

	.section	__TEXT,__literal16,16byte_literals
	.p2align	4                               ; -- Begin function func0
lCPI0_0:
	.long	4294967200                      ; 0xffffffa0
	.long	4294967200                      ; 0xffffffa0
	.long	4294967200                      ; 0xffffffa0
	.long	4294967200                      ; 0xffffffa0
lCPI0_1:
	.long	4294967248                      ; 0xffffffd0
	.long	4294967248                      ; 0xffffffd0
	.long	4294967248                      ; 0xffffffd0
	.long	4294967248                      ; 0xffffffd0
	.section	__TEXT,__text,regular,pure_instructions
	.globl	_func0
	.p2align	2
_func0:                                 ; @func0
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	stp	x28, x27, [sp, #32]             ; 16-byte Folded Spill
	stp	x26, x25, [sp, #48]             ; 16-byte Folded Spill
	stp	x24, x23, [sp, #64]             ; 16-byte Folded Spill
	stp	x22, x21, [sp, #80]             ; 16-byte Folded Spill
	stp	x20, x19, [sp, #96]             ; 16-byte Folded Spill
	stp	x29, x30, [sp, #112]            ; 16-byte Folded Spill
	add	x29, sp, #112
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_offset w19, -24
	.cfi_offset w20, -32
	.cfi_offset w21, -40
	.cfi_offset w22, -48
	.cfi_offset w23, -56
	.cfi_offset w24, -64
	.cfi_offset w25, -72
	.cfi_offset w26, -80
	.cfi_offset w27, -88
	.cfi_offset w28, -96
	mov	x20, x1
	mov	x19, x0
Lloh80:
	adrp	x8, ___stack_chk_guard@GOTPAGE
Lloh81:
	ldr	x8, [x8, ___stack_chk_guard@GOTPAGEOFF]
Lloh82:
	ldr	x8, [x8]
	str	x8, [sp, #24]
	sbfiz	x0, x20, #2, #32
	bl	_malloc
	mov	x21, x0
	cmp	w20, #1
	b.lt	LBB0_20
; %bb.1:
	mov	x23, #0
	mov	w24, w20
	add	x25, sp, #12
	add	x26, x25, #1
	add	x27, x19, #4
	add	x28, x21, #4
Lloh83:
	adrp	x8, lCPI0_0@PAGE
Lloh84:
	ldr	q0, [x8, lCPI0_0@PAGEOFF]
	str	q0, [sp]                        ; 16-byte Folded Spill
Lloh85:
	adrp	x8, lCPI0_1@PAGE
Lloh86:
	ldr	q0, [x8, lCPI0_1@PAGEOFF]
	str	q0, [sp, #16]                   ; 16-byte Folded Spill
Lloh87:
	adrp	x22, l_.str@PAGE
Lloh88:
	add	x22, x22, l_.str@PAGEOFF
	b	LBB0_4
LBB0_2:                                 ;   in Loop: Header=BB0_4 Depth=1
	mov	w10, #0
LBB0_3:                                 ;   in Loop: Header=BB0_4 Depth=1
	ldrsb	w8, [sp, #12]
	sub	w8, w10, w8
	add	w8, w8, #48
	ldr	w9, [x19, x23, lsl #2]
	sub	w10, w10, #48
	cmp	w9, #0
	csel	w8, w10, w8, gt
	str	w8, [x21, x23, lsl #2]
	add	x23, x23, #1
	cmp	x23, x24
	b.eq	LBB0_16
LBB0_4:                                 ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB0_10 Depth 2
                                        ;     Child Loop BB0_14 Depth 2
	ldr	w8, [x19, x23, lsl #2]
	cmp	w8, #0
	cneg	w8, w8, mi
	str	x8, [sp]
	add	x0, sp, #12
	mov	w1, #0
	mov	w2, #12
	mov	x3, x22
	bl	___sprintf_chk
	add	x0, sp, #12
	bl	_strlen
	cmp	w0, #2
	b.lt	LBB0_2
; %bb.5:                                ;   in Loop: Header=BB0_4 Depth=1
	and	x8, x0, #0xffffffff
	sub	x11, x8, #1
	cmp	x11, #8
	b.hs	LBB0_7
; %bb.6:                                ;   in Loop: Header=BB0_4 Depth=1
	mov	w10, #0
	mov	w9, #1
	b	LBB0_13
LBB0_7:                                 ;   in Loop: Header=BB0_4 Depth=1
	cmp	x11, #32
	b.hs	LBB0_9
; %bb.8:                                ;   in Loop: Header=BB0_4 Depth=1
	mov	w10, #0
	mov	w9, #1
	b	LBB0_12
LBB0_9:                                 ;   in Loop: Header=BB0_4 Depth=1
	and	x12, x11, #0xffffffffffffffe0
	orr	x9, x12, #0x1
	movi.2d	v0, #0000000000000000
	mov	x10, x12
	mov	x13, x26
	movi.2d	v1, #0000000000000000
	movi.2d	v2, #0000000000000000
	movi.2d	v3, #0000000000000000
LBB0_10:                                ;   Parent Loop BB0_4 Depth=1
                                        ; =>  This Inner Loop Header: Depth=2
	ldp	q4, q5, [x13, #-16]
	sshll.8h	v6, v4, #0
	sshll2.8h	v4, v4, #0
	sshll.8h	v7, v5, #0
	sshll2.8h	v5, v5, #0
	saddw2.4s	v0, v0, v4
	saddw.4s	v1, v1, v4
	saddw2.4s	v2, v2, v6
	saddw.4s	v3, v3, v6
	saddw2.4s	v4, v4, v5
	saddw.4s	v5, v5, v7
	add	x13, x13, #32
	subs	x10, x10, #32
	b.ne	LBB0_10
; %bb.11:                               ;   in Loop: Header=BB0_4 Depth=1
	add.4s	v0, v2, v0
	add.4s	v1, v4, v1
	add.4s	v0, v0, v1
	addv.4s	s0, v0
	fmov	w10, s0
	cmp	x11, x12
	b.eq	LBB0_3
LBB0_12:                                ;   in Loop: Header=BB0_4 Depth=1
	add	x11, x25, x9
	sub	x8, x8, x9
LBB0_13:                                ;   in Loop: Header=BB0_4 Depth=1
	add	x9, x27, x9, lsl #2
LBB0_14:                                ;   Parent Loop BB0_4 Depth=1
                                        ; =>  This Inner Loop Header: Depth=2
	ldrsb	w11, [x11], #1
	add	w10, w10, w11
	sub	w10, w10, #48
	subs	x8, x8, #1
	b.ne	LBB0_14
	b	LBB0_3
LBB0_15:                                ;   in Loop: Header=BB0_16 Depth=1
	add	w8, w8, #1
	cmp	w8, w20
	b.eq	LBB0_20
LBB0_16:                                ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB0_19 Depth 2
	cmp	w20, #1
	b.eq	LBB0_15
; %bb.17:                               ;   in Loop: Header=BB0_16 Depth=1
	ldr	w10, [x21]
	add	x9, x19, #4
	add	x11, x21, #4
	sub	x12, x24, #1
	b	LBB0_19
LBB0_18:                                ;   in Loop: Header=BB0_19 Depth=2
	stp	w13, w10, [x11, #-4]
	ldur	d0, [x9, #-4]
	rev64.2s	v0, v0
	stur	d0, [x9, #-4]
	add	x9, x9, #4
	add	x11, x11, #4
	subs	x12, x12, #1
	b.eq	LBB0_15
LBB0_19:                                ;   Parent Loop BB0_16 Depth=1
                                        ; =>  This Inner Loop Header: Depth=2
	ldr	w13, [x11]
	cmp	w10, w13
	b.gt	LBB0_18
	b	LBB0_18
LBB0_20:
	mov	x0, x21
	bl	_free
	ldr	x8, [sp, #24]
Lloh89:
	adrp	x9, ___stack_chk_guard@GOTPAGE
Lloh90:
	ldr	x9, [x9, ___stack_chk_guard@GOTPAGEOFF]
Lloh91:
	ldr	x9, [x9]
	cmp	x9, x8
	b.ne	LBB0_22
; %bb.21:
	mov	x0, x19
	ldp	x29, x30, [sp, #112]            ; 16-byte Folded Reload
	ldp	x20, x19, [sp, #96]             ; 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]             ; 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]             ; 16-byte Folded Reload
	ldp	x26, x25, [sp, #48]             ; 16-byte Folded Reload
	ldp	x28, x27, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #128
	ret
LBB0_22:
	bl	___stack_chk_fail
	.loh AdrpLdrGotLdr	Lloh80, Lloh81, Lloh82
	.loh AdrpAdd	Lloh87, Lloh88
	.loh AdrpLdr	Lloh85, Lloh86
	.loh AdrpAdrp	Lloh83, Lloh85
	.loh AdrpLdr	Lloh83, Lloh84
	.loh AdrpLdrGotLdr	Lloh89, Lloh90, Lloh91
	.cfi_endproc
                                        ; -- End function
	.section	__TEXT,__cstring,cstring_literals
l_.str:                                 ; @.str
	.asciz	"%d"

	.section	__TEXT,__literal16,16byte_literals
	.p2align	4                               ; -- Begin function func0
lCPI0_0:
	.long	4294967200                      ; 0xffffffa0
	.long	4294967200                      ; 0xffffffa0
	.long	4294967200                      ; 0xffffffa0
	.long	4294967200                      ; 0xffffffa0
lCPI0_1:
	.long	4294967248                      ; 0xffffffd0
	.long	4294967248                      ; 0xffffffd0
	.long	4294967248                      ; 0xffffffd0
	.long	4294967248                      ; 0xffffffd0
	.section	__TEXT,__text,regular,pure_instructions
	.globl	_func0
	.p2align	2
_func0:                                 ; @func0
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	stp	x28, x27, [sp, #32]             ; 16-byte Folded Spill
	stp	x26, x25, [sp, #48]             ; 16-byte Folded Spill
	stp	x24, x23, [sp, #64]             ; 16-byte Folded Spill
	stp	x22, x21, [sp, #80]             ; 16-byte Folded Spill
	stp	x20, x19, [sp, #96]             ; 16-byte Folded Spill
	stp	x29, x30, [sp, #112]            ; 16-byte Folded Spill
	add	x29, sp, #112
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_offset w19, -24
	.cfi_offset w20, -32
	.cfi_offset w21, -40
	.cfi_offset w22, -48
	.cfi_offset w23, -56
	.cfi_offset w24, -64
	.cfi_offset w25, -72
	.cfi_offset w26, -80
	.cfi_offset w27, -88
	.cfi_offset w28, -96
	mov	x20, x1
	mov	x19, x0
Lloh92:
	adrp	x8, ___stack_chk_guard@GOTPAGE
Lloh93:
	ldr	x8, [x8, ___stack_chk_guard@GOTPAGEOFF]
Lloh94:
	ldr	x8, [x8]
	str	x8, [sp, #24]
	sbfiz	x0, x20, #2, #32
	bl	_malloc
	mov	x21, x0
	cmp	w20, #1
	b.lt	LBB0_20
; %bb.1:
	mov	x23, #0
	mov	w24, w20
	add	x25, sp, #12
	add	x26, x25, #1
	add	x27, x19, #4
	add	x28, x21, #4
Lloh95:
	adrp	x8, lCPI0_0@PAGE
Lloh96:
	ldr	q0, [x8, lCPI0_0@PAGEOFF]
	str	q0, [sp]                        ; 16-byte Folded Spill
Lloh97:
	adrp	x8, lCPI0_1@PAGE
Lloh98:
	ldr	q0, [x8, lCPI0_1@PAGEOFF]
	str	q0, [sp, #16]                   ; 16-byte Folded Spill
Lloh99:
	adrp	x22, l_.str@PAGE
Lloh100:
	add	x22, x22, l_.str@PAGEOFF
	b	LBB0_4
LBB0_2:                                 ;   in Loop: Header=BB0_4 Depth=1
	mov	w10, #0
LBB0_3:                                 ;   in Loop: Header=BB0_4 Depth=1
	ldrsb	w8, [sp, #12]
	sub	w8, w10, w8
	add	w8, w8, #48
	ldr	w9, [x19, x23, lsl #2]
	sub	w10, w10, #48
	cmp	w9, #0
	csel	w8, w10, w8, gt
	str	w8, [x21, x23, lsl #2]
	add	x23, x23, #1
	cmp	x23, x24
	b.eq	LBB0_16
LBB0_4:                                 ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB0_10 Depth 2
                                        ;     Child Loop BB0_14 Depth 2
	ldr	w8, [x19, x23, lsl #2]
	cmp	w8, #0
	cneg	w8, w8, mi
	str	x8, [sp]
	add	x0, sp, #12
	mov	w1, #0
	mov	w2, #12
	mov	x3, x22
	bl	___sprintf_chk
	add	x0, sp, #12
	bl	_strlen
	cmp	w0, #2
	b.lt	LBB0_2
; %bb.5:                                ;   in Loop: Header=BB0_4 Depth=1
	and	x8, x0, #0xffffffff
	sub	x11, x8, #1
	cmp	x11, #8
	b.hs	LBB0_7
; %bb.6:                                ;   in Loop: Header=BB0_4 Depth=1
	mov	w10, #0
	mov	w9, #1
	b	LBB0_13
LBB0_7:                                 ;   in Loop: Header=BB0_4 Depth=1
	cmp	x11, #32
	b.hs	LBB0_9
; %bb.8:                                ;   in Loop: Header=BB0_4 Depth=1
	mov	w10, #0
	mov	w9, #1
	b	LBB0_12
LBB0_9:                                 ;   in Loop: Header=BB0_4 Depth=1
	and	x12, x11, #0xffffffffffffffe0
	orr	x9, x12, #0x1
	movi.2d	v0, #0000000000000000
	mov	x10, x12
	mov	x13, x26
	movi.2d	v1, #0000000000000000
	movi.2d	v2, #0000000000000000
	movi.2d	v3, #0000000000000000
LBB0_10:                                ;   Parent Loop BB0_4 Depth=1
                                        ; =>  This Inner Loop Header: Depth=2
	ldp	q4, q5, [x13, #-16]
	sshll.8h	v6, v4, #0
	sshll2.8h	v4, v4, #0
	sshll.8h	v7, v5, #0
	sshll2.8h	v5, v5, #0
	saddw2.4s	v0, v0, v4
	saddw.4s	v1, v1, v4
	saddw2.4s	v2, v2, v6
	saddw.4s	v3, v3, v6
	saddw2.4s	v4, v4, v5
	saddw.4s	v5, v5, v7
	add	x13, x13, #32
	subs	x10, x10, #32
	b.ne	LBB0_10
; %bb.11:                               ;   in Loop: Header=BB0_4 Depth=1
	add.4s	v0, v2, v0
	add.4s	v1, v4, v1
	add.4s	v0, v0, v1
	addv.4s	s0, v0
	fmov	w10, s0
	cmp	x11, x12
	b.eq	LBB0_3
LBB0_12:                                ;   in Loop: Header=BB0_4 Depth=1
	add	x11, x25, x9
	sub	x8, x8, x9
LBB0_13:                                ;   in Loop: Header=BB0_4 Depth=1
	add	x9, x27, x9, lsl #2
LBB0_14:                                ;   Parent Loop BB0_4 Depth=1
                                        ; =>  This Inner Loop Header: Depth=2
	ldrsb	w11, [x11], #1
	add	w10, w10, w11
	sub	w10, w10, #48
	subs	x8, x8, #1
	b.ne	LBB0_14
	b	LBB0_3
LBB0_15:                                ;   in Loop: Header=BB0_16 Depth=1
	add	w8, w8, #1
	cmp	w8, w20
	b.eq	LBB0_20
LBB0_16:                                ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB0_19 Depth 2
	cmp	w20, #1
	b.eq	LBB0_15
; %bb.17:                               ;   in Loop: Header=BB0_16 Depth=1
	ldr	w10, [x21]
	add	x9, x19, #4
	add	x11, x21, #4
	sub	x12, x24, #1
	b	LBB0_19
LBB0_18:                                ;   in Loop: Header=BB0_19 Depth=2
	stp	w13, w10, [x11, #-4]
	ldur	d0, [x9, #-4]
	rev64.2s	v0, v0
	stur	d0, [x9, #-4]
	add	x9, x9, #4
	add	x11, x11, #4
	subs	x12, x12, #1
	b.eq	LBB0_15
LBB0_19:                                ;   Parent Loop BB0_16 Depth=1
                                        ; =>  This Inner Loop Header: Depth=2
	ldr	w13, [x11]
	cmp	w10, w13
	b.gt	LBB0_18
	b	LBB0_18
LBB0_20:
	mov	x0, x21
	bl	_free
	ldr	x8, [sp, #24]
Lloh101:
	adrp	x9, ___stack_chk_guard@GOTPAGE
Lloh102:
	ldr	x9, [x9, ___stack_chk_guard@GOTPAGEOFF]
Lloh103:
	ldr	x9, [x9]
	cmp	x9, x8
	b.ne	LBB0_22
; %bb.21:
	mov	x0, x19
	ldp	x29, x30, [sp, #112]            ; 16-byte Folded Reload
	ldp	x20, x19, [sp, #96]             ; 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]             ; 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]             ; 16-byte Folded Reload
	ldp	x26, x25, [sp, #48]             ; 16-byte Folded Reload
	ldp	x28, x27, [sp, #32]             ; 16-byte Folded Reload
	add	sp, sp, #128
	ret
LBB0_22:
	bl	___stack_chk_fail
	.loh AdrpLdrGotLdr	Lloh92, Lloh93, Lloh94
	.loh AdrpAdd	Lloh99, Lloh100
	.loh AdrpLdr	Lloh97, Lloh98
	.loh AdrpAdrp	Lloh95, Lloh97
	.loh AdrpLdr	Lloh95, Lloh96
	.loh AdrpLdrGotLdr	Lloh101, Lloh102, Lloh103
	.cfi_endproc
                                        ; -- End function
	.section	__TEXT,__cstring,cstring_literals
l_.str:                                 ; @.str
	.asciz	"%d"

	.section	__TEXT,__literal16,16byte_literals
	.p2align	4                               ; -- Begin function func0
lCPI0_0:
	.long	4294967200                      ; 0xffffffa0
	.long	4294967200                      ; 0xffffffa0
	.long	4294967200                      ; 0xffffffa0
	.long	4294967200                      ; 0xffffffa0
lCPI0_1:
	.long	4294967248                      ; 0xffffffd0
	.long	4294967248                      ; 0xffffffd0
	.long	4294967248                      ; 0xffffffd0
	.long	4294967248                      ; 0xffffffd0
	.section	__TEXT,__text,regular,pure_instructions
	.globl	_func0
	.p2align	2
_func0:                                 ; @func0
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	stp	x28, x27, [sp, #32]             ; 16-byte Folded Spill
	stp	x26, x25, [sp, #48]             ; 16-byte Folded Spill
	stp	x24, x23, [sp, #64]             ; 16-byte Folded Spill
	stp	x22, x21, [sp, #80]             ; 16-byte Folded Spill
	stp	x20, x19, [sp, #96]             ; 16-byte Folded Spill
	stp	x29, x30, [sp, #112]            ; 16-byte Folded Spill
	add	x29, sp, #112
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_offset w19, -24
	.cfi_offset w20, -32
	.cfi_offset w21, -40
	.cfi_offset w22, -48
	.cfi_offset w23, -56
	.cfi_offset w24, -64
	.cfi_offset w25, -72
	.cfi_offset w26, -80
	.cfi_offset w27, -88
	.cfi_offset w28, -96
	mov	x20, x1
	mov	x19, x0
Lloh104:
	adrp	x8, ___stack_chk_guard@GOTPAGE
Lloh105:
	ldr	x8, [x8, ___stack_chk_guard@GOTPAGEOFF]
Lloh106:
	ldr	x8, [x8]
	str	x8, [sp, #24]
	sbfiz	x0, x20, #2, #32
	bl	_malloc
	mov	x21, x0
	cmp	w20, #1
	b.lt	LBB0_20
; %bb.1:
	mov	x23, #0
	mov	w24, w20
	add	x25, sp, #12
	add	x26, x25, #1
	add	x27, x19, #4
	add	x28, x21, #4
Lloh107:
	adrp	x8, lCPI0_0@PAGE
Lloh108:
	ldr	q0, [x8, lCPI0_0@PAGEOFF]
	str	q0, [sp]                        ; 16-byte Folded Spill
Lloh109:
	adrp	x8, lCPI0_1@PAGE
Lloh110:
	ldr	q0, [x8, lCPI0_1@PAGEOFF]
	str	q0, [sp, #16]                   ; 16-byte Folded Spill
Lloh111:
	adrp	x22, l_.str@PAGE
Lloh112:
	add	x22, x22, l_.str@PAGEOFF
	b	LBB0_4
LBB0_2:                                 ;   in Loop: Header=BB0_4 Depth=1
	mov	w10, #0
LBB0_3:                                 ;   in Loop: Header=BB0_4 Depth=1
	ldrsb	w8, [sp, #12]
	sub	w8, w10, w8
	add	w8, w8, #48
	ldr	w9, [x19, x23, lsl #2]
	sub	w10, w10, #48
	cmp	w9, #0
	csel	w8, w10, w8, gt
	str	w8, [x21, x23, lsl #2]
	add	x23, x23, #1
	cmp	x23, x24
	b.eq	LBB0_16
LBB0_4:                                 ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB0_10 Depth 2
                                        ;     Child Loop BB0_14 Depth 2
	ldr	w8, [x19, x23, lsl #2]
	cmp	w8, #0
	cneg	w8, w8, mi
	str	x8, [sp]
	add	x0, sp, #12
	mov	w1, #0
	mov	w2, #12
	mov	x3, x22
	bl	___sprintf_chk
	add	x0, sp, #12
	bl	_strlen
	cmp	w0, #2
	b.lt	LBB0_2
; %bb.5:                                ;   in Loop: Header=BB0_4 Depth=1
	and	x8, x0, #0xffffffff
	sub	x11, x8, #1
	cmp	x11, #8
	b.hs	LBB0_7
; %bb.6:                                ;   in Loop: Header=BB0_4 Depth=1
	mov	w10, #0
	mov	w9, #1
	b	LBB0_13
LBB0_7:                                 ;   in Loop: Header=BB0_4 Depth=1
	cmp	x11, #32
	b.hs	LBB0_9
; %bb.8:                                ;   in Loop: Header=BB0_4 Depth=1
	mov	w10, #0
	mov	w9, #1
	b	LBB0_12
LBB0_9:                                 ;   in Loop: Header=BB0_4 Depth=1
	and	x12, x11, #0xffffffffffffffe0
	orr	x9, x12, #0x1
	movi.2d	v0, #0000000000000000
	mov	x