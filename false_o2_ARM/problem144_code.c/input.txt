# problem144/code.c
	.section	__TEXT,__text,regular,pure_instructions
	.build_version macos, 13, 0	sdk_version 13, 3
	.globl	_func0                          ## -- Begin function func0
	.p2align	4, 0x90
_func0:                                 ## @func0
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rsi, %r8
	movq	%rdi, %r15
	xorl	%r13d, %r13d
	xorl	%ebx, %ebx
	xorl	%r12d, %r12d
	jmp	LBB0_1
LBB0_11:                                ##   in Loop: Header=BB0_1 Depth=1
	movslq	%r12d, %r12
	movq	%r12, -48(%rbp)                 ## 8-byte Spill
	leaq	(%r8,%r12), %rdi
	movslq	%ebx, %rdx
	subq	%rdx, %rsi
	movq	%r8, %r12
	callq	_memcpy
	movq	%r12, %r8
	movq	-48(%rbp), %r12                 ## 8-byte Reload
	addl	%ebx, %r12d
	.p2align	4, 0x90
LBB0_12:                                ##   in Loop: Header=BB0_1 Depth=1
	incq	%r13
	movl	%r14d, %ebx
LBB0_1:                                 ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB0_8 Depth 2
	leaq	(%r15,%r13), %rsi
	movb	(%r15,%r13), %al
	cmpb	$32, %al
	je	LBB0_4
## %bb.2:                               ##   in Loop: Header=BB0_1 Depth=1
	testb	%al, %al
	je	LBB0_13
## %bb.3:                               ##   in Loop: Header=BB0_1 Depth=1
	incl	%ebx
	movl	%ebx, %r14d
	jmp	LBB0_12
	.p2align	4, 0x90
LBB0_4:                                 ##   in Loop: Header=BB0_1 Depth=1
	xorl	%r14d, %r14d
	cmpl	$2, %ebx
	jl	LBB0_12
## %bb.5:                               ##   in Loop: Header=BB0_1 Depth=1
	cmpl	$4, %ebx
	jb	LBB0_9
## %bb.6:                               ##   in Loop: Header=BB0_1 Depth=1
	movl	$2, %ecx
	.p2align	4, 0x90
LBB0_8:                                 ##   Parent Loop BB0_1 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movl	%ebx, %eax
	cltd
	idivl	%ecx
	testl	%edx, %edx
	je	LBB0_12
## %bb.7:                               ##   in Loop: Header=BB0_8 Depth=2
	incl	%ecx
	movl	%ecx, %eax
	imull	%ecx, %eax
	cmpl	%ebx, %eax
	jle	LBB0_8
LBB0_9:                                 ##   in Loop: Header=BB0_1 Depth=1
	testl	%r12d, %r12d
	jle	LBB0_11
## %bb.10:                              ##   in Loop: Header=BB0_1 Depth=1
	movl	%r12d, %eax
	incl	%r12d
	movb	$32, (%r8,%rax)
	jmp	LBB0_11
LBB0_13:
	cmpl	$2, %ebx
	jl	LBB0_21
## %bb.14:
	cmpl	$4, %ebx
	jb	LBB0_18
## %bb.15:
	movl	$2, %ecx
	.p2align	4, 0x90
LBB0_17:                                ## =>This Inner Loop Header: Depth=1
	movl	%ebx, %eax
	cltd
	idivl	%ecx
	testl	%edx, %edx
	je	LBB0_21
## %bb.16:                              ##   in Loop: Header=BB0_17 Depth=1
	incl	%ecx
	movl	%ecx, %eax
	imull	%ecx, %eax
	cmpl	%ebx, %eax
	jle	LBB0_17
LBB0_18:
	testl	%r12d, %r12d
	jle	LBB0_20
## %bb.19:
	movl	%r12d, %eax
	incl	%r12d
	movb	$32, (%r8,%rax)
LBB0_20:
	movslq	%r12d, %r12
	leaq	(%r8,%r12), %rdi
	movslq	%ebx, %rdx
	subq	%rdx, %rsi
	movq	%r8, %r14
	callq	_memcpy
	movq	%r14, %r8
	addl	%ebx, %r12d
LBB0_21:
	movslq	%r12d, %rax
	movb	$0, (%r8,%rax)
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
.subsections_via_symbols
