# problem161/code.c
	.section	__TEXT,__text,regular,pure_instructions
	.build_version macos, 13, 0	sdk_version 13, 3
	.section	__TEXT,__literal16,16byte_literals
	.p2align	4                               ## -- Begin function func0
LCPI0_0:
	.long	0                               ## 0x0
	.long	1                               ## 0x1
	.long	2                               ## 0x2
	.long	3                               ## 0x3
LCPI0_1:
	.long	4                               ## 0x4
	.long	4                               ## 0x4
	.long	4                               ## 0x4
	.long	4                               ## 0x4
LCPI0_2:
	.long	8                               ## 0x8
	.long	8                               ## 0x8
	.long	8                               ## 0x8
	.long	8                               ## 0x8
LCPI0_3:
	.long	12                              ## 0xc
	.long	12                              ## 0xc
	.long	12                              ## 0xc
	.long	12                              ## 0xc
LCPI0_4:
	.long	16                              ## 0x10
	.long	16                              ## 0x10
	.long	16                              ## 0x10
	.long	16                              ## 0x10
LCPI0_5:
	.long	20                              ## 0x14
	.long	20                              ## 0x14
	.long	20                              ## 0x14
	.long	20                              ## 0x14
LCPI0_6:
	.long	24                              ## 0x18
	.long	24                              ## 0x18
	.long	24                              ## 0x18
	.long	24                              ## 0x18
LCPI0_7:
	.long	28                              ## 0x1c
	.long	28                              ## 0x1c
	.long	28                              ## 0x1c
	.long	28                              ## 0x1c
LCPI0_8:
	.long	32                              ## 0x20
	.long	32                              ## 0x20
	.long	32                              ## 0x20
	.long	32                              ## 0x20
	.section	__TEXT,__text,regular,pure_instructions
	.globl	_func0
	.p2align	4, 0x90
_func0:                                 ## @func0
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%ecx, %r13d
	movl	%edx, %r15d
	movq	%rsi, %r12
	movq	%rdi, -56(%rbp)                 ## 8-byte Spill
	movslq	%ecx, %r14
	leaq	(,%r14,4), %rbx
	movq	%rbx, %rdi
	callq	_malloc
	movq	%rax, -48(%rbp)                 ## 8-byte Spill
	movq	%rbx, %rdi
	callq	_malloc
	movq	%rax, %rbx
	testl	%r14d, %r14d
	jle	LBB0_12
## %bb.1:
	movl	%r13d, %r14d
	leaq	(,%r14,4), %rdx
	movq	-48(%rbp), %rdi                 ## 8-byte Reload
	movq	%r12, %rsi
	callq	_memcpy
	cmpl	$8, %r13d
	jae	LBB0_4
## %bb.2:
	xorl	%eax, %eax
	jmp	LBB0_3
LBB0_4:
	movl	%r14d, %eax
	andl	$-8, %eax
	leaq	-8(%rax), %rsi
	movq	%rsi, %rdx
	shrq	$3, %rdx
	incq	%rdx
	movl	%edx, %ecx
	andl	$3, %ecx
	cmpq	$24, %rsi
	jae	LBB0_6
## %bb.5:
	movdqa	LCPI0_0(%rip), %xmm0            ## xmm0 = [0,1,2,3]
	xorl	%esi, %esi
	jmp	LBB0_8
LBB0_6:
	andq	$-4, %rdx
	movdqa	LCPI0_0(%rip), %xmm0            ## xmm0 = [0,1,2,3]
	xorl	%esi, %esi
	movdqa	LCPI0_1(%rip), %xmm8            ## xmm8 = [4,4,4,4]
	movdqa	LCPI0_2(%rip), %xmm9            ## xmm9 = [8,8,8,8]
	movdqa	LCPI0_3(%rip), %xmm10           ## xmm10 = [12,12,12,12]
	movdqa	LCPI0_4(%rip), %xmm4            ## xmm4 = [16,16,16,16]
	movdqa	LCPI0_5(%rip), %xmm5            ## xmm5 = [20,20,20,20]
	movdqa	LCPI0_6(%rip), %xmm6            ## xmm6 = [24,24,24,24]
	movdqa	LCPI0_7(%rip), %xmm7            ## xmm7 = [28,28,28,28]
	movdqa	LCPI0_8(%rip), %xmm1            ## xmm1 = [32,32,32,32]
	.p2align	4, 0x90
LBB0_7:                                 ## =>This Inner Loop Header: Depth=1
	movdqa	%xmm0, %xmm2
	paddd	%xmm8, %xmm2
	movdqu	%xmm0, (%rbx,%rsi,4)
	movdqu	%xmm2, 16(%rbx,%rsi,4)
	movdqa	%xmm0, %xmm2
	paddd	%xmm9, %xmm2
	movdqa	%xmm0, %xmm3
	paddd	%xmm10, %xmm3
	movdqu	%xmm2, 32(%rbx,%rsi,4)
	movdqu	%xmm3, 48(%rbx,%rsi,4)
	movdqa	%xmm0, %xmm2
	paddd	%xmm4, %xmm2
	movdqa	%xmm0, %xmm3
	paddd	%xmm5, %xmm3
	movdqu	%xmm2, 64(%rbx,%rsi,4)
	movdqu	%xmm3, 80(%rbx,%rsi,4)
	movdqa	%xmm0, %xmm2
	paddd	%xmm6, %xmm2
	movdqa	%xmm0, %xmm3
	paddd	%xmm7, %xmm3
	movdqu	%xmm2, 96(%rbx,%rsi,4)
	movdqu	%xmm3, 112(%rbx,%rsi,4)
	addq	$32, %rsi
	paddd	%xmm1, %xmm0
	addq	$-4, %rdx
	jne	LBB0_7
LBB0_8:
	testq	%rcx, %rcx
	je	LBB0_11
## %bb.9:
	leaq	(%rbx,%rsi,4), %rdx
	addq	$16, %rdx
	shlq	$5, %rcx
	xorl	%esi, %esi
	movdqa	LCPI0_1(%rip), %xmm1            ## xmm1 = [4,4,4,4]
	movdqa	LCPI0_2(%rip), %xmm2            ## xmm2 = [8,8,8,8]
	.p2align	4, 0x90
LBB0_10:                                ## =>This Inner Loop Header: Depth=1
	movdqa	%xmm0, %xmm3
	paddd	%xmm1, %xmm3
	movdqu	%xmm0, -16(%rdx,%rsi)
	movdqu	%xmm3, (%rdx,%rsi)
	paddd	%xmm2, %xmm0
	addq	$32, %rsi
	cmpq	%rsi, %rcx
	jne	LBB0_10
LBB0_11:
	cmpq	%r14, %rax
	je	LBB0_12
	.p2align	4, 0x90
LBB0_3:                                 ## =>This Inner Loop Header: Depth=1
	movl	%eax, (%rbx,%rax,4)
	incq	%rax
	cmpq	%rax, %r14
	jne	LBB0_3
LBB0_12:
	testl	%r15d, %r15d
	jle	LBB0_47
## %bb.13:
	movl	%r15d, %r14d
	xorl	%r15d, %r15d
	leaq	L_.str(%rip), %r12
	movq	%r14, -64(%rbp)                 ## 8-byte Spill
	jmp	LBB0_14
	.p2align	4, 0x90
LBB0_21:                                ##   in Loop: Header=BB0_14 Depth=1
	leaq	1(%r15), %r13
	movslq	%eax, %r12
	movq	-48(%rbp), %r14                 ## 8-byte Reload
	xorps	%xmm0, %xmm0
	cvtsi2sdl	(%r14,%r12,4), %xmm0
	xorps	%xmm1, %xmm1
	cvtsi2sdl	(%r14,%rcx,4), %xmm1
	callq	_pow
	cvttsd2si	%xmm0, %eax
	movl	%eax, (%r14,%r12,4)
	movl	%r12d, 4(%rbx,%r15,4)
	movq	%r13, %r15
	movq	-64(%rbp), %r14                 ## 8-byte Reload
	leaq	L_.str(%rip), %r12
	cmpq	%r14, %r15
	je	LBB0_23
LBB0_14:                                ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB0_18 Depth 2
                                        ##     Child Loop BB0_20 Depth 2
	movq	-56(%rbp), %rax                 ## 8-byte Reload
	movq	(%rax,%r15,8), %rdi
	movq	%r12, %rsi
	callq	_strcmp
	testl	%eax, %eax
	je	LBB0_16
## %bb.15:                              ##   in Loop: Header=BB0_14 Depth=1
	incq	%r15
	cmpq	%r14, %r15
	jne	LBB0_14
	jmp	LBB0_23
	.p2align	4, 0x90
LBB0_16:                                ##   in Loop: Header=BB0_14 Depth=1
	movslq	(%rbx,%r15,4), %rax
	movl	(%rbx,%rax,4), %ecx
	cmpl	%eax, %ecx
	je	LBB0_17
	.p2align	4, 0x90
LBB0_18:                                ##   Parent Loop BB0_14 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movl	%ecx, (%rbx,%r15,4)
	movslq	%ecx, %rdx
	movl	%ecx, %eax
	movl	(%rbx,%rdx,4), %esi
	movl	%esi, %ecx
	cmpl	%edx, %esi
	jne	LBB0_18
LBB0_17:                                ##   in Loop: Header=BB0_14 Depth=1
	movslq	4(%rbx,%r15,4), %rcx
	.p2align	4, 0x90
LBB0_20:                                ##   Parent Loop BB0_14 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movl	(%rbx,%rcx,4), %edx
	cmpl	%ecx, %edx
	je	LBB0_21
## %bb.19:                              ##   in Loop: Header=BB0_20 Depth=2
	movl	%edx, 4(%rbx,%r15,4)
	movslq	%edx, %rcx
	jmp	LBB0_20
LBB0_23:
	xorl	%r15d, %r15d
	jmp	LBB0_24
	.p2align	4, 0x90
LBB0_31:                                ##   in Loop: Header=BB0_24 Depth=1
	movq	-48(%rbp), %rdx                 ## 8-byte Reload
	movl	(%rdx,%rcx,4), %esi
	movslq	%eax, %rcx
	movl	(%rdx,%rcx,4), %eax
	testl	%r13d, %r13d
	je	LBB0_32
## %bb.33:                              ##   in Loop: Header=BB0_24 Depth=1
	cltd
	idivl	%esi
LBB0_34:                                ##   in Loop: Header=BB0_24 Depth=1
	movq	-48(%rbp), %rdx                 ## 8-byte Reload
	movl	%eax, (%rdx,%rcx,4)
	movl	%ecx, 4(%rbx,%r15,4)
LBB0_35:                                ##   in Loop: Header=BB0_24 Depth=1
	incq	%r15
	cmpq	%r14, %r15
	je	LBB0_36
LBB0_24:                                ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB0_28 Depth 2
                                        ##     Child Loop BB0_30 Depth 2
	movq	-56(%rbp), %rax                 ## 8-byte Reload
	movq	(%rax,%r15,8), %r12
	movq	%r12, %rdi
	leaq	L_.str.1(%rip), %rsi
	callq	_strcmp
	movl	%eax, %r13d
	testl	%eax, %eax
	je	LBB0_26
## %bb.25:                              ##   in Loop: Header=BB0_24 Depth=1
	movq	%r12, %rdi
	leaq	L_.str.2(%rip), %rsi
	callq	_strcmp
	testl	%eax, %eax
	jne	LBB0_35
LBB0_26:                                ##   in Loop: Header=BB0_24 Depth=1
	movslq	(%rbx,%r15,4), %rax
	movl	(%rbx,%rax,4), %ecx
	cmpl	%eax, %ecx
	je	LBB0_27
	.p2align	4, 0x90
LBB0_28:                                ##   Parent Loop BB0_24 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movl	%ecx, (%rbx,%r15,4)
	movslq	%ecx, %rdx
	movl	%ecx, %eax
	movl	(%rbx,%rdx,4), %esi
	movl	%esi, %ecx
	cmpl	%edx, %esi
	jne	LBB0_28
LBB0_27:                                ##   in Loop: Header=BB0_24 Depth=1
	movslq	4(%rbx,%r15,4), %rcx
	.p2align	4, 0x90
LBB0_30:                                ##   Parent Loop BB0_24 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movl	(%rbx,%rcx,4), %edx
	cmpl	%ecx, %edx
	je	LBB0_31
## %bb.29:                              ##   in Loop: Header=BB0_30 Depth=2
	movl	%edx, 4(%rbx,%r15,4)
	movslq	%edx, %rcx
	jmp	LBB0_30
	.p2align	4, 0x90
LBB0_32:                                ##   in Loop: Header=BB0_24 Depth=1
	imull	%esi, %eax
	jmp	LBB0_34
LBB0_36:
	xorl	%r15d, %r15d
	jmp	LBB0_37
	.p2align	4, 0x90
LBB0_45:                                ##   in Loop: Header=BB0_37 Depth=1
	movq	-48(%rbp), %rsi                 ## 8-byte Reload
	movl	(%rsi,%rcx,4), %ecx
	movl	%ecx, %edx
	negl	%edx
	testl	%r13d, %r13d
	cltq
	cmovel	%ecx, %edx
	movl	%eax, 4(%rbx,%r15,4)
	incq	%r15
	addl	%edx, (%rsi,%rax,4)
	cmpq	%r14, %r15
	je	LBB0_47
LBB0_37:                                ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB0_42 Depth 2
                                        ##     Child Loop BB0_44 Depth 2
	movq	-56(%rbp), %rax                 ## 8-byte Reload
	movq	(%rax,%r15,8), %r12
	movq	%r12, %rdi
	leaq	L_.str.3(%rip), %rsi
	callq	_strcmp
	movl	%eax, %r13d
	testl	%eax, %eax
	je	LBB0_40
## %bb.38:                              ##   in Loop: Header=BB0_37 Depth=1
	movq	%r12, %rdi
	leaq	L_.str.4(%rip), %rsi
	callq	_strcmp
	testl	%eax, %eax
	je	LBB0_40
## %bb.39:                              ##   in Loop: Header=BB0_37 Depth=1
	incq	%r15
	cmpq	%r14, %r15
	jne	LBB0_37
	jmp	LBB0_47
	.p2align	4, 0x90
LBB0_40:                                ##   in Loop: Header=BB0_37 Depth=1
	movslq	(%rbx,%r15,4), %rax
	movl	(%rbx,%rax,4), %ecx
	cmpl	%eax, %ecx
	je	LBB0_41
	.p2align	4, 0x90
LBB0_42:                                ##   Parent Loop BB0_37 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movl	%ecx, (%rbx,%r15,4)
	movslq	%ecx, %rdx
	movl	%ecx, %eax
	movl	(%rbx,%rdx,4), %esi
	movl	%esi, %ecx
	cmpl	%edx, %esi
	jne	LBB0_42
LBB0_41:                                ##   in Loop: Header=BB0_37 Depth=1
	movslq	4(%rbx,%r15,4), %rcx
	.p2align	4, 0x90
LBB0_44:                                ##   Parent Loop BB0_37 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movl	(%rbx,%rcx,4), %edx
	cmpl	%ecx, %edx
	je	LBB0_45
## %bb.43:                              ##   in Loop: Header=BB0_44 Depth=2
	movl	%edx, 4(%rbx,%r15,4)
	movslq	%edx, %rcx
	jmp	LBB0_44
LBB0_47:
	movq	-48(%rbp), %rdi                 ## 8-byte Reload
	movl	(%rdi), %r14d
	callq	_free
	movq	%rbx, %rdi
	callq	_free
	movl	%r14d, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.section	__TEXT,__cstring,cstring_literals
L_.str:                                 ## @.str
	.asciz	"**"

L_.str.1:                               ## @.str.1
	.asciz	"*"

L_.str.2:                               ## @.str.2
	.asciz	"//"

L_.str.3:                               ## @.str.3
	.asciz	"+"

L_.str.4:                               ## @.str.4
	.asciz	"-"

.subsections_via_symbols
