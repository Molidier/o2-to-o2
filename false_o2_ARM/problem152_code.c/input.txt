# problem152/code.c
	.section	__TEXT,__text,regular,pure_instructions
	.build_version macos, 13, 0	sdk_version 13, 3
	.section	__TEXT,__literal16,16byte_literals
	.p2align	4                               ## -- Begin function func0
LCPI0_0:
	.quad	0x8000000000000000              ## double -0
	.quad	0x8000000000000000              ## double -0
LCPI0_1:
	.quad	0x3fdfffffffffffff              ## double 0.49999999999999994
	.quad	0x3fdfffffffffffff              ## double 0.49999999999999994
LCPI0_2:
	.quad	0x7fffffffffffffff              ## double NaN
	.quad	0x7fffffffffffffff              ## double NaN
LCPI0_3:
	.quad	0x3f1a36e2eb1c432d              ## double 1.0E-4
	.quad	0x3f1a36e2eb1c432d              ## double 1.0E-4
LCPI0_4:
	.long	2147483649                      ## 0x80000001
	.long	2147483649                      ## 0x80000001
	.space	4
	.space	4
LCPI0_5:
	.long	1                               ## 0x1
	.long	1                               ## 0x1
	.space	4
	.space	4
	.section	__TEXT,__literal8,8byte_literals
	.p2align	3
LCPI0_6:
	.quad	0x3f1a36e2eb1c432d              ## double 1.0E-4
	.section	__TEXT,__text,regular,pure_instructions
	.globl	_func0
	.p2align	4, 0x90
_func0:                                 ## @func0
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	testl	%esi, %esi
	jle	LBB0_1
## %bb.2:
	movl	%esi, %r8d
	cmpl	$4, %esi
	jae	LBB0_4
## %bb.3:
	xorl	%edx, %edx
	xorl	%eax, %eax
	jmp	LBB0_7
LBB0_1:
	xorl	%eax, %eax
	popq	%rbp
	retq
LBB0_4:
	movl	%r8d, %edx
	andl	$-4, %edx
	leaq	(,%r8,4), %rax
	andq	$-16, %rax
	pxor	%xmm15, %xmm15
	xorl	%esi, %esi
	movapd	LCPI0_0(%rip), %xmm8            ## xmm8 = [-0.0E+0,-0.0E+0]
	movapd	LCPI0_1(%rip), %xmm9            ## xmm9 = [4.9999999999999994E-1,4.9999999999999994E-1]
	movapd	LCPI0_2(%rip), %xmm10           ## xmm10 = [NaN,NaN]
	movapd	LCPI0_3(%rip), %xmm11           ## xmm11 = [1.0E-4,1.0E-4]
	movapd	LCPI0_4(%rip), %xmm12           ## xmm12 = <2147483649,2147483649,u,u>
	movdqa	LCPI0_5(%rip), %xmm13           ## xmm13 = <1,1,u,u>
	pcmpeqd	%xmm14, %xmm14
	pxor	%xmm5, %xmm5
	.p2align	4, 0x90
LBB0_5:                                 ## =>This Inner Loop Header: Depth=1
	movsd	(%rdi,%rsi), %xmm3              ## xmm3 = mem[0],zero
	movsd	8(%rdi,%rsi), %xmm2             ## xmm2 = mem[0],zero
	cvtps2pd	%xmm3, %xmm7
	cvtps2pd	%xmm2, %xmm1
	movapd	%xmm7, %xmm6
	andpd	%xmm8, %xmm6
	orpd	%xmm9, %xmm6
	addpd	%xmm7, %xmm6
	roundpd	$11, %xmm6, %xmm6
	movapd	%xmm1, %xmm4
	andpd	%xmm8, %xmm4
	orpd	%xmm9, %xmm4
	addpd	%xmm1, %xmm4
	roundpd	$11, %xmm4, %xmm4
	subpd	%xmm6, %xmm7
	subpd	%xmm4, %xmm1
	andpd	%xmm10, %xmm7
	andpd	%xmm10, %xmm1
	cmpltpd	%xmm11, %xmm7
	cmpltpd	%xmm11, %xmm1
	xorps	%xmm0, %xmm0
	cmpltps	%xmm3, %xmm0
	pmovsxdq	%xmm0, %xmm3
	pand	%xmm7, %xmm3
	xorps	%xmm0, %xmm0
	cmpltps	%xmm2, %xmm0
	pmovsxdq	%xmm0, %xmm2
	pand	%xmm1, %xmm2
	cvttpd2dq	%xmm6, %xmm0
	cvttpd2dq	%xmm4, %xmm1
	movapd	%xmm0, %xmm4
	andpd	%xmm12, %xmm4
	movapd	%xmm1, %xmm6
	andpd	%xmm12, %xmm6
	pcmpeqd	%xmm13, %xmm4
	pxor	%xmm14, %xmm4
	pmovzxdq	%xmm4, %xmm4                    ## xmm4 = xmm4[0],zero,xmm4[1],zero
	pcmpeqd	%xmm13, %xmm6
	pxor	%xmm14, %xmm6
	pmovzxdq	%xmm6, %xmm6                    ## xmm6 = xmm6[0],zero,xmm6[1],zero
	pmulld	%xmm0, %xmm0
	pmulld	%xmm1, %xmm1
	pmovzxdq	%xmm0, %xmm0                    ## xmm0 = xmm0[0],zero,xmm0[1],zero
	pmovzxdq	%xmm1, %xmm1                    ## xmm1 = xmm1[0],zero,xmm1[1],zero
	pand	%xmm3, %xmm4
	pand	%xmm2, %xmm6
	pxor	%xmm14, %xmm3
	por	%xmm4, %xmm3
	pxor	%xmm14, %xmm2
	por	%xmm6, %xmm2
	psllq	$63, %xmm3
	psrad	$31, %xmm3
	pshufd	$245, %xmm3, %xmm3              ## xmm3 = xmm3[1,1,3,3]
	pandn	%xmm0, %xmm3
	paddq	%xmm3, %xmm15
	psllq	$63, %xmm2
	psrad	$31, %xmm2
	pshufd	$245, %xmm2, %xmm0              ## xmm0 = xmm2[1,1,3,3]
	pandn	%xmm1, %xmm0
	paddq	%xmm0, %xmm5
	addq	$16, %rsi
	cmpq	%rsi, %rax
	jne	LBB0_5
## %bb.6:
	paddq	%xmm15, %xmm5
	pshufd	$238, %xmm5, %xmm0              ## xmm0 = xmm5[2,3,2,3]
	paddq	%xmm5, %xmm0
	movq	%xmm0, %rax
	cmpq	%r8, %rdx
	jne	LBB0_7
LBB0_13:
	popq	%rbp
	retq
LBB0_7:
	movaps	LCPI0_0(%rip), %xmm0            ## xmm0 = [-0.0E+0,-0.0E+0]
	movaps	LCPI0_1(%rip), %xmm1            ## xmm1 = [4.9999999999999994E-1,4.9999999999999994E-1]
	movapd	LCPI0_2(%rip), %xmm2            ## xmm2 = [NaN,NaN]
	movsd	LCPI0_6(%rip), %xmm3            ## xmm3 = mem[0],zero
	pxor	%xmm4, %xmm4
	jmp	LBB0_8
	.p2align	4, 0x90
LBB0_12:                                ##   in Loop: Header=BB0_8 Depth=1
	incq	%rdx
	cmpq	%rdx, %r8
	je	LBB0_13
LBB0_8:                                 ## =>This Inner Loop Header: Depth=1
	movss	(%rdi,%rdx,4), %xmm5            ## xmm5 = mem[0],zero,zero,zero
	xorps	%xmm7, %xmm7
	cvtss2sd	%xmm5, %xmm7
	movaps	%xmm7, %xmm6
	andps	%xmm0, %xmm6
	orps	%xmm1, %xmm6
	addsd	%xmm7, %xmm6
	roundsd	$11, %xmm6, %xmm6
	subsd	%xmm6, %xmm7
	andpd	%xmm2, %xmm7
	ucomisd	%xmm7, %xmm3
	jbe	LBB0_12
## %bb.9:                               ##   in Loop: Header=BB0_8 Depth=1
	ucomiss	%xmm4, %xmm5
	jbe	LBB0_12
## %bb.10:                              ##   in Loop: Header=BB0_8 Depth=1
	cvttsd2si	%xmm6, %esi
	movl	%esi, %ecx
	andl	$-2147483647, %ecx              ## imm = 0x80000001
	cmpl	$1, %ecx
	jne	LBB0_12
## %bb.11:                              ##   in Loop: Header=BB0_8 Depth=1
	imull	%esi, %esi
	addq	%rsi, %rax
	jmp	LBB0_12
	.cfi_endproc
                                        ## -- End function
.subsections_via_symbols
