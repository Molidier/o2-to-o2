# problem130/code.c
	.section	__TEXT,__text,regular,pure_instructions
	.build_version macos, 13, 0	sdk_version 13, 3
	.section	__TEXT,__literal16,16byte_literals
	.p2align	4                               ; -- Begin function func0
lCPI0_0:
	.quad	2                               ; 0x2
	.quad	3                               ; 0x3
lCPI0_1:
	.quad	0                               ; 0x0
	.quad	1                               ; 0x1
	.section	__TEXT,__text,regular,pure_instructions
	.globl	_func0
	.p2align	2
_func0:                                 ; @func0
	.cfi_startproc
; %bb.0:
	stp	x20, x19, [sp, #-32]!           ; 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_offset w19, -24
	.cfi_offset w20, -32
	mov	x19, x2
	subs	w8, w1, #1
	b.lt	LBB0_11
; %bb.1:
	mov	x9, #0
	mov	w10, w1
Lloh0:
	adrp	x11, lCPI0_0@PAGE
Lloh1:
	ldr	q0, [x11, lCPI0_0@PAGEOFF]
Lloh2:
	adrp	x11, lCPI0_1@PAGE
Lloh3:
	ldr	q1, [x11, lCPI0_1@PAGEOFF]
                                        ; implicit-def: $w11
                                        ; implicit-def: $w12
	b	LBB0_3
LBB0_2:                                 ;   in Loop: Header=BB0_3 Depth=1
	add	x9, x9, #1
	cmp	x9, x10
	b.eq	LBB0_5
LBB0_3:                                 ; =>This Loop Header: Depth=1
                                        ;     Child Loop BB0_4 Depth 2
	mov	x13, #0
	ldr	x14, [x0, x9, lsl #3]
LBB0_4:                                 ;   Parent Loop BB0_3 Depth=1
                                        ; =>  This Inner Loop Header: Depth=2
	ldr	w15, [x14, x13, lsl #2]
	cmp	w15, #1
	csel	w11, w9, w11, eq
	csel	w12, w13, w12, eq
	add	x13, x13, #1
	cmp	x10, x13
	b.ne	LBB0_4
	b	LBB0_2
LBB0_5:
	mul	w10, w1, w1
	sxtw	x9, w11
	cmp	w12, #1
	b.lt	LBB0_7
; %bb.6:
	sub	w11, w12, #1
	ldr	x11, [x0, w11, uxtw #3]
	ldr	w11, [x11, x9, lsl #2]
	cmp	w11, w10
	csel	w10, w11, w10, lt
LBB0_7:
	cmp	w12, w8
	b.ge	LBB0_9
; %bb.8:
	add	w11, w12, #1
	ldr	x11, [x0, w11, sxtw #3]
	ldr	w11, [x11, x9, lsl #2]
	cmp	w11, w10
	csel	w10, w11, w10, lt
LBB0_9:
	subs	w11, w9, #1
	b.lt	LBB0_12
; %bb.10:
	ldr	x12, [x0, w12, sxtw #3]
	ldr	w11, [x12, w11, uxtw #2]
	cmp	w11, w10
	csel	w10, w11, w10, lt
	b	LBB0_12
LBB0_11:
	mul	w10, w1, w1
LBB0_12:
	str	w19, [x3]
	sbfiz	x0, x19, #2, #32
	bl	_malloc
	cmp	w19, #1
	b.lt	LBB0_22
; %bb.13:
	mov	w8, w19
	cmp	w19, #16
	b.hs	LBB0_15
; %bb.14:
	mov	x9, #0
	b	LBB0_18
LBB0_15:
	and	x9, x8, #0xfffffff0
	dup.4s	v0, w10
	add	x11, x0, #32
Lloh4:
	adrp	x12, lCPI0_0@PAGE
Lloh5:
	ldr	q1, [x12, lCPI0_0@PAGEOFF]
Lloh6:
	adrp	x12, lCPI0_1@PAGE
Lloh7:
	ldr	q2, [x12, lCPI0_1@PAGEOFF]
	movi.4s	v3, #1
	mov	w12, #16
	dup.2d	v4, x12
	mov	x12, x9
LBB0_16:                                ; =>This Inner Loop Header: Depth=1
	and.16b	v5, v1, v3
	and.16b	v6, v2, v3
	cmeq.2d	v6, v6, #0
	cmeq.2d	v5, v5, #0
	uzp1.4s	v5, v5, v6
	bsl.16b	v5, v3, v0
	bsl.16b	v0, v3, v0
	stp	q5, q0, [x11, #-32]
	stp	q5, q0, [x11], #64
	add.2d	v2, v2, v4
	add.2d	v1, v1, v4
	subs	x12, x12, #16
	b.ne	LBB0_16
; %bb.17:
	cmp	x9, x8
	b.eq	LBB0_22
LBB0_18:
	add	x11, x0, x9, lsl #2
	sub	x8, x8, x9
LBB0_19:                                ; =>This Inner Loop Header: Depth=1
	tst	x9, #0x1
	csinc	w9, w10, wzr, ne
	str	w9, [x11], #4
	subs	x8, x8, #1
	b.ne	LBB0_19
; %bb.20:
                                        ; kill: def $w10 killed $w10 killed $x10 def $x10
LBB0_21:                                ; =>This Inner Loop Header: Depth=1
	tst	x9, #0x1
	csinc	w10, w10, wzr, ne
	str	w10, [x0], #4
	subs	x8, x8, #1
	b.ne	LBB0_21
LBB0_22:
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	ldp	x20, x19, [sp], #32             ; 16-byte Folded Reload
	ret
	.loh AdrpLdr	Lloh2, Lloh3
	.loh AdrpAdrp	Lloh0, Lloh2
	.loh AdrpLdr	Lloh0, Lloh1
	.loh AdrpLdr	Lloh6, Lloh7
	.loh AdrpAdrp	Lloh4, Lloh6
	.loh AdrpLdr	Lloh4, Lloh5
	.cfi_endproc
                                        ; -- End function
.subsections_via_symbols

