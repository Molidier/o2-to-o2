# problem130/code.c
	.section	__TEXT,__text,regular,pure_instructions
	.build_version macos, 13, 0	sdk_version 13, 3
	.section	__TEXT,__literal16,16byte_literals
	.p2align	4                               ## -- Begin function func0
LCPI0_0:
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
	.byte	1                               ## 0x1
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
LCPI0_1:
	.quad	2                               ## 0x2
	.quad	3                               ## 0x3
LCPI0_2:
	.quad	1                               ## 0x1
	.quad	1                               ## 0x1
LCPI0_3:
	.long	1                               ## 0x1
	.long	1                               ## 0x1
	.long	1                               ## 0x1
	.long	1                               ## 0x1
LCPI0_4:
	.quad	16                              ## 0x10
	.quad	16                              ## 0x10
	.section	__TEXT,__text,regular,pure_instructions
	.globl	_func0
	.p2align	4, 0x90
_func0:                                 ## @func0
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edx, %r15d
	testl	%esi, %esi
	jle	LBB0_1
## %bb.2:
	movl	%r15d, -44(%rbp)                ## 4-byte Spill
	movl	%esi, %r9d
	leaq	-1(%r9), %r8
	movl	%r9d, %r10d
	andl	$3, %r10d
	movl	%r9d, %r11d
	andl	$-4, %r11d
	xorl	%r15d, %r15d
                                        ## implicit-def: $eax
                                        ## implicit-def: $edx
	jmp	LBB0_3
	.p2align	4, 0x90
LBB0_8:                                 ##   in Loop: Header=BB0_3 Depth=1
	incq	%r15
	cmpq	%r9, %r15
	je	LBB0_9
LBB0_3:                                 ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB0_4 Depth 2
                                        ##     Child Loop BB0_7 Depth 2
	movq	(%rdi,%r15,8), %r12
	xorl	%ebx, %ebx
	cmpq	$3, %r8
	jb	LBB0_5
	.p2align	4, 0x90
LBB0_4:                                 ##   Parent Loop BB0_3 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	leal	1(%rbx), %r13d
	leal	2(%rbx), %r14d
	cmpl	$1, (%r12,%rbx,4)
	cmovel	%ebx, %eax
	cmovel	%r15d, %edx
	cmpl	$1, 4(%r12,%rbx,4)
	cmovel	%r13d, %eax
	cmovel	%r15d, %edx
	cmpl	$1, 8(%r12,%rbx,4)
	movl	%eax, %r13d
	cmovel	%r14d, %r13d
	cmovel	%r15d, %edx
	leal	3(%rbx), %eax
	cmpl	$1, 12(%r12,%rbx,4)
	cmovel	%r15d, %edx
	cmovnel	%r13d, %eax
	addq	$4, %rbx
	cmpq	%r11, %rbx
	jne	LBB0_4
LBB0_5:                                 ##   in Loop: Header=BB0_3 Depth=1
	testq	%r10, %r10
	je	LBB0_8
## %bb.6:                               ##   in Loop: Header=BB0_3 Depth=1
	movq	%r10, %r13
	.p2align	4, 0x90
LBB0_7:                                 ##   Parent Loop BB0_3 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	cmpl	$1, (%r12,%rbx,4)
	cmovel	%r15d, %edx
	cmovel	%ebx, %eax
	incq	%rbx
	decq	%r13
	jne	LBB0_7
	jmp	LBB0_8
LBB0_9:
	movl	%esi, %r14d
	imull	%esi, %r14d
	movslq	%eax, %r8
	testl	%edx, %edx
	jle	LBB0_11
## %bb.10:
	leal	-1(%rdx), %ebx
	movq	(%rdi,%rbx,8), %rbx
	movl	(%rbx,%r8,4), %ebx
	cmpl	%r14d, %ebx
	cmovll	%ebx, %r14d
LBB0_11:
	movl	-44(%rbp), %r15d                ## 4-byte Reload
	decl	%esi
	movslq	%edx, %r9
	cmpl	%esi, %edx
	jge	LBB0_13
## %bb.12:
	movq	8(%rdi,%r9,8), %rdx
	movl	(%rdx,%r8,4), %edx
	cmpl	%r14d, %edx
	cmovll	%edx, %r14d
LBB0_13:
	testl	%eax, %eax
	jle	LBB0_15
## %bb.14:
	movq	(%rdi,%r9,8), %rdx
	leal	-1(%rax), %ebx
	movl	(%rdx,%rbx,4), %edx
	cmpl	%r14d, %edx
	cmovll	%edx, %r14d
LBB0_15:
	cmpl	%esi, %eax
	jge	LBB0_17
## %bb.16:
	movq	(%rdi,%r9,8), %rax
	movl	4(%rax,%r8,4), %eax
	cmpl	%r14d, %eax
	cmovll	%eax, %r14d
	jmp	LBB0_17
LBB0_1:
	imull	%esi, %esi
	movl	%esi, %r14d
LBB0_17:
	movl	%r15d, (%rcx)
	movslq	%r15d, %rbx
	leaq	(,%rbx,4), %rdi
	callq	_malloc
	testl	%ebx, %ebx
	jle	LBB0_29
## %bb.18:
	movl	%r15d, %ecx
	cmpl	$8, %r15d
	jae	LBB0_20
## %bb.19:
	xorl	%edx, %edx
	jmp	LBB0_27
LBB0_20:
	movl	%ecx, %edx
	andl	$-8, %edx
	movd	%r14d, %xmm0
	pshufd	$0, %xmm0, %xmm7                ## xmm7 = xmm0[0,0,0,0]
	leaq	-8(%rdx), %rsi
	movq	%rsi, %r8
	shrq	$3, %r8
	incq	%r8
	testq	%rsi, %rsi
	je	LBB0_21
## %bb.22:
	movq	%r8, %rdi
	andq	$-2, %rdi
	movdqa	LCPI0_1(%rip), %xmm6            ## xmm6 = [2,3]
	movdqa	LCPI0_0(%rip), %xmm5            ## xmm5 = [0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0]
	xorl	%esi, %esi
	movdqa	LCPI0_2(%rip), %xmm8            ## xmm8 = [1,1]
	pxor	%xmm9, %xmm9
	movaps	LCPI0_3(%rip), %xmm10           ## xmm10 = [1,1,1,1]
	movdqa	LCPI0_4(%rip), %xmm11           ## xmm11 = [16,16]
	.p2align	4, 0x90
LBB0_23:                                ## =>This Inner Loop Header: Depth=1
	movdqa	%xmm6, %xmm4
	pand	%xmm8, %xmm4
	movdqa	%xmm5, %xmm1
	pand	%xmm8, %xmm1
	movdqa	%xmm1, %xmm0
	pcmpeqq	%xmm9, %xmm0
	movdqa	%xmm4, %xmm3
	pcmpeqq	%xmm9, %xmm3
	shufps	$136, %xmm3, %xmm0              ## xmm0 = xmm0[0,2],xmm3[0,2]
	movdqa	%xmm7, %xmm3
	blendvps	%xmm0, %xmm10, %xmm3
	movdqa	%xmm7, %xmm2
	blendvps	%xmm0, %xmm10, %xmm2
	movups	%xmm3, (%rax,%rsi,4)
	movups	%xmm2, 16(%rax,%rsi,4)
	movups	%xmm3, 32(%rax,%rsi,4)
	movups	%xmm2, 48(%rax,%rsi,4)
	addq	$16, %rsi
	paddq	%xmm11, %xmm5
	paddq	%xmm11, %xmm6
	addq	$-2, %rdi
	jne	LBB0_23
## %bb.24:
	testb	$1, %r8b
	je	LBB0_26
LBB0_25:
	pxor	%xmm0, %xmm0
	pcmpeqq	%xmm0, %xmm1
	pcmpeqq	%xmm0, %xmm4
	shufps	$136, %xmm4, %xmm1              ## xmm1 = xmm1[0,2],xmm4[0,2]
	movaps	LCPI0_3(%rip), %xmm2            ## xmm2 = [1,1,1,1]
	movdqa	%xmm7, %xmm3
	movaps	%xmm1, %xmm0
	blendvps	%xmm0, %xmm2, %xmm3
	blendvps	%xmm0, %xmm2, %xmm7
	movups	%xmm3, (%rax,%rsi,4)
	movups	%xmm7, 16(%rax,%rsi,4)
LBB0_26:
	cmpq	%rcx, %rdx
	je	LBB0_29
LBB0_27:
	movl	$1, %esi
	.p2align	4, 0x90
LBB0_28:                                ## =>This Inner Loop Header: Depth=1
	testb	$1, %dl
	movl	%r14d, %edi
	cmovel	%esi, %edi
	movl	%edi, (%rax,%rdx,4)
	incq	%rdx
	cmpq	%rdx, %rcx
	jne	LBB0_28
LBB0_29:
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
LBB0_21:
	movdqa	LCPI0_0(%rip), %xmm1            ## xmm1 = [0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0]
	xorl	%esi, %esi
	movdqa	%xmm1, %xmm4
	testb	$1, %r8b
	jne	LBB0_25
	jmp	LBB0_26
	.cfi_endproc
                                        ## -- End function
.subsections_via_symbols
