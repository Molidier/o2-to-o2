# problem15/code.c
	.section	__TEXT,__text,regular,pure_instructions
	.build_version macos, 13, 0	sdk_version 13, 3
	.globl	_func0                          ## -- Begin function func0
	.p2align	4, 0x90
_func0:                                 ## @func0
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rsi, -56(%rbp)                 ## 8-byte Spill
	movq	%rdi, %r15
	callq	_strlen
	movq	%rax, %r14
	movq	%rax, %rbx
	shlq	$32, %rbx
	movq	%rbx, %rdi
	sarq	$29, %rdi
	callq	_malloc
	movq	%rax, %r13
	movabsq	$4294967296, %rdi               ## imm = 0x100000000
	addq	%rbx, %rdi
	sarq	$32, %rdi
	callq	_malloc
	movq	%rax, %rbx
	movb	$0, (%rax)
	testl	%r14d, %r14d
	movq	%r14, -48(%rbp)                 ## 8-byte Spill
	jle	LBB0_3
## %bb.1:
	movl	%r14d, %eax
	movq	%rax, -64(%rbp)                 ## 8-byte Spill
	xorl	%r12d, %r12d
	.p2align	4, 0x90
LBB0_2:                                 ## =>This Inner Loop Header: Depth=1
	movq	%rbx, %rdi
	callq	_strlen
	movq	%rax, %r14
	leaq	2(%rax), %rsi
	movq	%rbx, %rdi
	callq	_realloc
	movq	%rax, %rbx
	movzbl	(%r15,%r12), %eax
	movb	%al, (%rbx,%r14)
	movb	$0, 1(%rbx,%r14)
	movq	%rbx, %rdi
	callq	_strlen
	leaq	1(%rax), %rdi
	callq	_malloc
	movq	%rax, (%r13,%r12,8)
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	_strcpy
	incq	%r12
	cmpq	%r12, -64(%rbp)                 ## 8-byte Folded Reload
	jne	LBB0_2
LBB0_3:
	movq	%rbx, %rdi
	callq	_free
	movq	-56(%rbp), %rax                 ## 8-byte Reload
	movq	-48(%rbp), %rcx                 ## 8-byte Reload
	movl	%ecx, (%rax)
	movq	%r13, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
.subsections_via_symbols
