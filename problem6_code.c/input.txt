# problem6/code.c
	.section	__TEXT,__text,regular,pure_instructions
	.build_version macos, 13, 0	sdk_version 13, 3
	.globl	_func0                          ## -- Begin function func0
	.p2align	4, 0x90
_func0:                                 ## @func0
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%esi, %r15d
	xorl	%eax, %eax
	testl	%esi, %esi
	leal	-1(%r15,%r15), %esi
	cmovlel	%eax, %esi
	movl	%edx, %r14d
	movq	%rdi, %rbx
	movl	%esi, (%rcx)
	movslq	%esi, %rdi
	shlq	$2, %rdi
	callq	_malloc
	testl	%r15d, %r15d
	jle	LBB0_13
## %bb.1:
	movl	(%rbx), %ecx
	movl	%ecx, (%rax)
	cmpl	$1, %r15d
	je	LBB0_13
## %bb.2:
	movl	%r15d, %ecx
	leaq	-1(%rcx), %r8
	movl	$1, %esi
	movl	$1, %edi
	cmpq	$4, %r8
	jb	LBB0_11
## %bb.3:
	movq	%r8, %r9
	andq	$-4, %r9
	movd	%r14d, %xmm0
	pshufd	$80, %xmm0, %xmm0               ## xmm0 = xmm0[0,0,1,1]
	leaq	-4(%r9), %rdx
	movq	%rdx, %rsi
	shrq	$2, %rsi
	incq	%rsi
	testq	%rdx, %rdx
	je	LBB0_4
## %bb.5:
	movq	%rsi, %rdx
	andq	$-2, %rdx
	xorl	%edi, %edi
	.p2align	4, 0x90
LBB0_6:                                 ## =>This Inner Loop Header: Depth=1
	movq	4(%rbx,%rdi,4), %xmm1           ## xmm1 = mem[0],zero
	movq	12(%rbx,%rdi,4), %xmm2          ## xmm2 = mem[0],zero
	movdqa	%xmm0, %xmm3
	punpckldq	%xmm1, %xmm3            ## xmm3 = xmm3[0],xmm1[0],xmm3[1],xmm1[1]
	movdqu	%xmm3, 4(%rax,%rdi,8)
	movdqa	%xmm0, %xmm1
	punpckldq	%xmm2, %xmm1            ## xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	movdqu	%xmm1, 20(%rax,%rdi,8)
	movq	20(%rbx,%rdi,4), %xmm1          ## xmm1 = mem[0],zero
	movq	28(%rbx,%rdi,4), %xmm2          ## xmm2 = mem[0],zero
	movdqa	%xmm0, %xmm3
	punpckldq	%xmm1, %xmm3            ## xmm3 = xmm3[0],xmm1[0],xmm3[1],xmm1[1]
	movdqu	%xmm3, 36(%rax,%rdi,8)
	movdqa	%xmm0, %xmm1
	punpckldq	%xmm2, %xmm1            ## xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	movdqu	%xmm1, 52(%rax,%rdi,8)
	addq	$8, %rdi
	addq	$-2, %rdx
	jne	LBB0_6
## %bb.7:
	testb	$1, %sil
	je	LBB0_9
LBB0_8:
	leaq	(,%rdi,4), %rdx
	shlq	$3, %rdi
	orq	$4, %rdx
	movq	(%rbx,%rdx), %xmm1              ## xmm1 = mem[0],zero
	movq	8(%rbx,%rdx), %xmm2             ## xmm2 = mem[0],zero
	movq	%rdi, %rdx
	orq	$8, %rdx
	orq	$24, %rdi
	movdqa	%xmm0, %xmm3
	punpckldq	%xmm1, %xmm3            ## xmm3 = xmm3[0],xmm1[0],xmm3[1],xmm1[1]
	movdqu	%xmm3, -4(%rax,%rdx)
	punpckldq	%xmm2, %xmm0            ## xmm0 = xmm0[0],xmm2[0],xmm0[1],xmm2[1]
	movdqu	%xmm0, -4(%rax,%rdi)
LBB0_9:
	cmpq	%r9, %r8
	je	LBB0_13
## %bb.10:
	leaq	1(%r9), %rsi
	leaq	(%r9,%r9), %rdi
	incq	%rdi
LBB0_11:
	leaq	(%rbx,%rsi,4), %rdx
	subq	%rsi, %rcx
	leaq	(%rax,%rdi,4), %rsi
	addq	$4, %rsi
	xorl	%edi, %edi
	.p2align	4, 0x90
LBB0_12:                                ## =>This Inner Loop Header: Depth=1
	movl	%r14d, -4(%rsi,%rdi,8)
	movl	(%rdx,%rdi,4), %ebx
	movl	%ebx, (%rsi,%rdi,8)
	incq	%rdi
	cmpq	%rdi, %rcx
	jne	LBB0_12
LBB0_13:
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
LBB0_4:
	xorl	%edi, %edi
	testb	$1, %sil
	jne	LBB0_8
	jmp	LBB0_9
	.cfi_endproc
                                        ## -- End function
.subsections_via_symbols
