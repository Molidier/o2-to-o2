# problem66/code.c
	.section	__TEXT,__text,regular,pure_instructions
	.build_version macos, 13, 0	sdk_version 13, 3
	.globl	_func0                          ## -- Begin function func0
	.p2align	4, 0x90
_func0:                                 ## @func0
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	subq	$64, %rsp
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%esi, %r14d
	movl	%edi, %r8d
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	leaq	_func0.xs(%rip), %r12
	leaq	L_.str(%rip), %rcx
	movl	$50, %edx
	movq	%r12, %rdi
	xorl	%esi, %esi
	xorl	%eax, %eax
	callq	___sprintf_chk
	movq	%r12, %rdi
	callq	_strlen
	movl	%eax, %r15d
	subl	%r14d, %r15d
	jge	LBB0_10
## %bb.1:
	cmpl	$2, %eax
	jl	LBB0_8
## %bb.2:
	movq	%rax, %r8
	shrq	%r8
	movl	%r8d, %r10d
	andl	$2147483647, %r10d              ## imm = 0x7FFFFFFF
	andl	$1, %r8d
	cmpq	$1, %r10
	jne	LBB0_4
## %bb.3:
	xorl	%edx, %edx
	jmp	LBB0_6
LBB0_10:
	movslq	%eax, %rsi
	addq	%r12, %rsi
	movslq	%r14d, %rbx
	subq	%rbx, %rsi
	leaq	-96(%rbp), %r14
	movl	$50, %edx
	movq	%r14, %rdi
	callq	___strcpy_chk
	movb	$0, -96(%rbp,%rbx)
	movslq	%r15d, %rdx
	movl	$50, %ecx
	movq	%r14, %rdi
	movq	%r12, %rsi
	callq	___strncat_chk
	movl	$50, %edx
	movq	%r12, %rdi
	movq	%r14, %rsi
	callq	___strcpy_chk
	jmp	LBB0_8
LBB0_4:
	movabsq	$-8589934592, %r9               ## imm = 0xFFFFFFFE00000000
	subq	%r8, %r10
	movq	%rax, %rdx
	shlq	$32, %rdx
	leaq	(%rdx,%r9), %rcx
	movabsq	$-4294967296, %rsi              ## imm = 0xFFFFFFFF00000000
	addq	%rdx, %rsi
	xorl	%edx, %edx
	.p2align	4, 0x90
LBB0_5:                                 ## =>This Inner Loop Header: Depth=1
	movzbl	(%rdx,%r12), %r11d
	movq	%rsi, %rdi
	sarq	$32, %rdi
	movzbl	(%rdi,%r12), %ebx
	movb	%bl, (%rdx,%r12)
	movb	%r11b, (%rdi,%r12)
	movzbl	1(%rdx,%r12), %r11d
	movq	%rcx, %rdi
	sarq	$32, %rdi
	movzbl	(%rdi,%r12), %ebx
	movb	%bl, 1(%rdx,%r12)
	movb	%r11b, (%rdi,%r12)
	addq	$2, %rdx
	addq	%r9, %rcx
	addq	%r9, %rsi
	cmpq	%rdx, %r10
	jne	LBB0_5
LBB0_6:
	testq	%r8, %r8
	je	LBB0_8
## %bb.7:
	movb	(%rdx,%r12), %cl
	movl	%edx, %esi
	notl	%esi
	addl	%eax, %esi
	movslq	%esi, %rax
	movb	(%rax,%r12), %bl
	movb	%bl, (%rdx,%r12)
	movb	%cl, (%rax,%r12)
LBB0_8:
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	cmpq	-40(%rbp), %rax
	jne	LBB0_11
## %bb.9:
	leaq	_func0.xs(%rip), %rax
	addq	$64, %rsp
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
LBB0_11:
	callq	___stack_chk_fail
	.cfi_endproc
                                        ## -- End function
.zerofill __DATA,__bss,_func0.xs,50,4   ## @func0.xs
	.section	__TEXT,__cstring,cstring_literals
L_.str:                                 ## @.str
	.asciz	"%d"

.subsections_via_symbols
