# problem118/code.c
	.section	__TEXT,__text,regular,pure_instructions
	.build_version macos, 13, 0	sdk_version 13, 3
	.globl	_func0                          ## -- Begin function func0
	.p2align	4, 0x90
_func0:                                 ## @func0
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rdx, -96(%rbp)                 ## 8-byte Spill
	movl	%esi, -84(%rbp)                 ## 4-byte Spill
	movq	%rdi, %r13
	callq	_strlen
	incq	%rax
	movq	%rax, -104(%rbp)                ## 8-byte Spill
	movq	%rax, %rdi
	callq	_malloc
	movq	%rax, -80(%rbp)                 ## 8-byte Spill
	xorl	%r12d, %r12d
	xorl	%eax, %eax
	movq	%rax, -72(%rbp)                 ## 8-byte Spill
	xorl	%ebx, %ebx
	xorl	%r14d, %r14d
	movl	$0, -44(%rbp)                   ## 4-byte Folded Spill
	movq	%r13, -64(%rbp)                 ## 8-byte Spill
	jmp	LBB0_1
	.p2align	4, 0x90
LBB0_8:                                 ##   in Loop: Header=BB0_1 Depth=1
	leal	1(%r12), %r14d
	xorl	%ebx, %ebx
LBB0_15:                                ##   in Loop: Header=BB0_1 Depth=1
	incq	%r12
	cmpq	%r12, -104(%rbp)                ## 8-byte Folded Reload
	je	LBB0_16
LBB0_1:                                 ## =>This Inner Loop Header: Depth=1
	movsbl	(%r13,%r12), %r15d
	testl	%r15d, %r15d
	js	LBB0_3
## %bb.2:                               ##   in Loop: Header=BB0_1 Depth=1
	movl	%r15d, %eax
	movq	__DefaultRuneLocale@GOTPCREL(%rip), %rcx
	movl	60(%rcx,%rax,4), %eax
	movl	$16384, %ecx                    ## imm = 0x4000
	andl	%ecx, %eax
	testl	%eax, %eax
	je	LBB0_5
	jmp	LBB0_6
	.p2align	4, 0x90
LBB0_3:                                 ##   in Loop: Header=BB0_1 Depth=1
	movl	$16384, %esi                    ## imm = 0x4000
	movl	%r15d, %edi
	callq	___maskrune
	testl	%eax, %eax
	jne	LBB0_6
LBB0_5:                                 ##   in Loop: Header=BB0_1 Depth=1
	testb	%r15b, %r15b
	je	LBB0_6
## %bb.9:                               ##   in Loop: Header=BB0_1 Depth=1
	movl	%ebx, -48(%rbp)                 ## 4-byte Spill
	movl	%r12d, %eax
	movl	%r14d, -52(%rbp)                ## 4-byte Spill
	subl	%r14d, %eax
	cltq
	movq	-80(%rbp), %rcx                 ## 8-byte Reload
	movb	%r15b, (%rcx,%rax)
	movsbl	(%r13,%r12), %ebx
	movl	$11, %edx
	leaq	L_.str(%rip), %rdi
	movl	%ebx, %esi
	callq	_memchr
	testq	%rax, %rax
	je	LBB0_11
## %bb.10:                              ##   in Loop: Header=BB0_1 Depth=1
	movq	-64(%rbp), %r13                 ## 8-byte Reload
	movl	-52(%rbp), %r14d                ## 4-byte Reload
	movl	-48(%rbp), %ebx                 ## 4-byte Reload
	jmp	LBB0_15
	.p2align	4, 0x90
LBB0_6:                                 ##   in Loop: Header=BB0_1 Depth=1
	cmpl	-84(%rbp), %ebx                 ## 4-byte Folded Reload
	jne	LBB0_8
## %bb.7:                               ##   in Loop: Header=BB0_1 Depth=1
	movl	%r12d, %eax
	subl	%r14d, %eax
	cltq
	movq	-80(%rbp), %r15                 ## 8-byte Reload
	movb	$0, (%r15,%rax)
	movl	-44(%rbp), %eax                 ## 4-byte Reload
	movslq	%eax, %r14
	incl	%eax
	movl	%eax, -44(%rbp)                 ## 4-byte Spill
	leaq	8(,%r14,8), %rsi
	movq	-72(%rbp), %rdi                 ## 8-byte Reload
	callq	_realloc
	movq	%rax, %rbx
	movq	%r15, %rdi
	callq	_strlen
	leaq	1(%rax), %rdi
	callq	_malloc
	movq	%rbx, -72(%rbp)                 ## 8-byte Spill
	movq	%rax, (%rbx,%r14,8)
	movq	-64(%rbp), %r13                 ## 8-byte Reload
	movq	%rax, %rdi
	movq	%r15, %rsi
	callq	_strcpy
	jmp	LBB0_8
LBB0_11:                                ##   in Loop: Header=BB0_1 Depth=1
	movzbl	%bl, %eax
	testb	%al, %al
	js	LBB0_13
## %bb.12:                              ##   in Loop: Header=BB0_1 Depth=1
	movq	__DefaultRuneLocale@GOTPCREL(%rip), %rcx
	movl	60(%rcx,%rax,4), %eax
	movl	$256, %ecx                      ## imm = 0x100
	andl	%ecx, %eax
	jmp	LBB0_14
LBB0_13:                                ##   in Loop: Header=BB0_1 Depth=1
	movzbl	%bl, %edi
	movl	$256, %esi                      ## imm = 0x100
	callq	___maskrune
LBB0_14:                                ##   in Loop: Header=BB0_1 Depth=1
	movq	-64(%rbp), %r13                 ## 8-byte Reload
	movl	-52(%rbp), %r14d                ## 4-byte Reload
	movl	-48(%rbp), %ebx                 ## 4-byte Reload
	cmpl	$1, %eax
	sbbl	$-1, %ebx
	jmp	LBB0_15
LBB0_16:
	movq	-80(%rbp), %rdi                 ## 8-byte Reload
	callq	_free
	movq	-96(%rbp), %rax                 ## 8-byte Reload
	movl	-44(%rbp), %ecx                 ## 4-byte Reload
	movl	%ecx, (%rax)
	movq	-72(%rbp), %rax                 ## 8-byte Reload
	addq	$72, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.section	__TEXT,__cstring,cstring_literals
L_.str:                                 ## @.str
	.asciz	"aeiouAEIOU"

.subsections_via_symbols
